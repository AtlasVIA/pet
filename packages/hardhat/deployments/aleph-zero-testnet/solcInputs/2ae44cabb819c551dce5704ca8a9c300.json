{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/Donations.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// (c)2024 Atlas (atlas@vialabs.io)\npragma solidity =0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IProtoCCTPGateway {\n    function usdc() external view returns (IERC20);\n    function send(uint _destChainId, address _recipient, uint256 _amount) external;\n}\n\ncontract Donations {\n    struct Message {\n        address sender;\n        uint256 timestamp;\n        string message;\n        uint256 amount;\n        bool isUSDC;\n    }\n\n    Message[] public messages;\n    uint256 public totalDonations;\n    address public treasuryAddress;\n    uint public rootChainId;\n    address public owner;\n    IERC20 public usdcToken;\n    IProtoCCTPGateway public protoCCTPGateway;\n\n    event DonationReceived(address indexed sender, uint256 amount, string message, bool isUSDC);\n    event TreasuryAddressUpdated(address indexed oldAddress, address indexed newAddress);\n    event USDCTokenUpdated(address indexed oldAddress, address indexed newAddress);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not authorized\");\n        _;\n    }\n\n    constructor(address _treasuryAddress, uint _rootChainId, address _usdcAddress, address _protoCCTPGateway) {\n        treasuryAddress = _treasuryAddress;\n        owner = msg.sender;\n        rootChainId = _rootChainId;\n        protoCCTPGateway = IProtoCCTPGateway(_protoCCTPGateway);\n        usdcToken = IERC20(_usdcAddress);\n    }\n\n    function updateTreasuryAddress(address _newTreasuryAddress) public onlyOwner {\n        require(_newTreasuryAddress != address(0), \"Invalid address\");\n        emit TreasuryAddressUpdated(treasuryAddress, _newTreasuryAddress);\n        treasuryAddress = _newTreasuryAddress;\n    }\n\n    function updateUSDCAddress(address _newUSDCAddress) public onlyOwner {\n        require(_newUSDCAddress != address(0), \"Invalid address\");\n        emit USDCTokenUpdated(address(usdcToken), _newUSDCAddress);\n        usdcToken = IERC20(_newUSDCAddress);\n    }\n\n    function donate(string memory _message) public payable {\n        require(msg.value > 0, \"Donation amount must be greater than zero\");\n        require(treasuryAddress != address(0), \"Treasury address not set\");\n\n        totalDonations += msg.value;\n\n        messages.push(Message({\n            sender: msg.sender,\n            timestamp: block.timestamp,\n            message: _message,\n            amount: msg.value,\n            isUSDC: false\n        }));\n\n        (bool success, ) = treasuryAddress.call{value: msg.value}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit DonationReceived(msg.sender, msg.value, _message, false);\n    }\n\n    function donateUSDC(uint256 _amount, string memory _message) public {\n        require(_amount > 0, \"Donation amount must be greater than zero\");\n        require(treasuryAddress != address(0), \"Treasury address not set\");\n        require(address(usdcToken) != address(0), \"USDC token address not set\");\n\n        require(usdcToken.transferFrom(msg.sender, treasuryAddress, _amount), \"USDC transfer failed\");\n\n        totalDonations += _amount;\n\n        messages.push(Message({\n            sender: msg.sender,\n            timestamp: block.timestamp,\n            message: _message,\n            amount: _amount,\n            isUSDC: true\n        }));\n\n        usdcToken.approve(address(protoCCTPGateway), _amount);\n        protoCCTPGateway.send(rootChainId, treasuryAddress, _amount);\n\n        emit DonationReceived(msg.sender, _amount, _message, true);\n    }\n\n    function getMessages(uint256 _count) public view returns (Message[] memory) {\n        uint256 messageCount = messages.length;\n        if (_count > messageCount) {\n            _count = messageCount;\n        }\n\n        Message[] memory recentMessages = new Message[](_count);\n        for (uint256 i = 0; i < _count; i++) {\n            recentMessages[i] = messages[messageCount - i - 1];\n        }\n        return recentMessages;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}