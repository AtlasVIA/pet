{
  "address": "0xF519A4Cb02d0265cc36d27dcb71b2f06eD2a239c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actionCost",
          "type": "uint256"
        }
      ],
      "name": "ActionCostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "MessageOwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "PetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "PetAdopted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_destChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "PetBridged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "PetFed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "PetRescued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "PetTreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "PetWalked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "txId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "featureId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "featureData",
          "type": "bytes"
        }
      ],
      "name": "SendMessageWithFeature",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "exsig",
          "type": "address"
        }
      ],
      "name": "SetExsig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxfee",
          "type": "uint256"
        }
      ],
      "name": "SetMaxfee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        }
      ],
      "name": "SetMaxgas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_shelterId",
          "type": "uint256"
        }
      ],
      "name": "ShelterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_shelterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "ShelterManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_shelterId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "ShelterManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CHAINS",
      "outputs": [
        {
          "internalType": "address",
          "name": "endpoint",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "endpointExtended",
          "type": "bytes"
        },
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "extended",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "FEATURES",
      "outputs": [
        {
          "internalType": "address",
          "name": "endpoint",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "endpointExtended",
          "type": "bytes"
        },
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "extended",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_GATEWAY",
      "outputs": [
        {
          "internalType": "contract IFeatureGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20cl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MESSAGE_OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MESSAGEv3",
      "outputs": [
        {
          "internalType": "contract IMessageV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "actionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shelterId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_personality",
          "type": "string"
        }
      ],
      "name": "addPet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountant",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "addShelter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shelterId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "addShelterManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "adoptPet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allShelters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availablePets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_destChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "bridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageV3",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_chains",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_endpoints",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_confirmations",
          "type": "uint16[]"
        }
      ],
      "name": "configureClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageV3",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_chains",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_endpoints",
          "type": "bytes[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_confirmations",
          "type": "uint16[]"
        }
      ],
      "name": "configureClientExtended",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_featureGateway",
          "type": "address"
        }
      ],
      "name": "configureFeatureGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "feed",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllShelters",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvailablePets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "getLastMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "getPet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lastWalk",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastFeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTreat",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalWalks",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFeeds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTreats",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDonations",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "personality",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "shelterId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "adopted",
              "type": "bool"
            }
          ],
          "internalType": "struct AdoptAPet.PetData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shelterId",
          "type": "uint256"
        }
      ],
      "name": "getShelter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "website",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "accountant",
              "type": "address"
            }
          ],
          "internalType": "struct AdoptAPet.ShelterData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sourceChainId",
          "type": "uint256"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sourceChainId",
          "type": "uint256"
        }
      ],
      "name": "isSelf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sourceChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "messageProcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "messages",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextNftId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextShelterId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastWalk",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastFeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTreat",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWalks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFeeds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTreats",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDonations",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "personality",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "shelterId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "adopted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shelterId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "removeShelterManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_actionCost",
          "type": "uint256"
        }
      ],
      "name": "setActionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setExsig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFee",
          "type": "uint256"
        }
      ],
      "name": "setMaxfee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        }
      ],
      "name": "setMaxgas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shelterAccountant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "shelterManagers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shelters",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accountant",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMessageOwner",
          "type": "address"
        }
      ],
      "name": "transferMessageOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "treat",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "walk",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x328f2edc0452ffd766df936b7fdfa10f036daab8350503e0a3e2455a38d74051",
  "receipt": {
    "to": null,
    "from": "0x02C4870d0af82440c1c768e078112FB377a1Fc93",
    "contractAddress": "0xF519A4Cb02d0265cc36d27dcb71b2f06eD2a239c",
    "transactionIndex": 4,
    "gasUsed": "4881884",
    "logsBloom": "0x
    "blockHash": "0x8457cf3513d0dd612a054d50efcf2554df4e8f3e598164784c3aa1399b9f2c3c",
    "transactionHash": "0x328f2edc0452ffd766df936b7fdfa10f036daab8350503e0a3e2455a38d74051",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 16986531,
        "transactionHash": "0x328f2edc0452ffd766df936b7fdfa10f036daab8350503e0a3e2455a38d74051",
        "address": "0xF519A4Cb02d0265cc36d27dcb71b2f06eD2a239c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000002c4870d0af82440c1c768e078112fb377a1fc93"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x8457cf3513d0dd612a054d50efcf2554df4e8f3e598164784c3aa1399b9f2c3c"
      }
    ],
    "blockNumber": 16986531,
    "cumulativeGasUsed": "7251332",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a9987f5ca175b84792337ca8f5dc14d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actionCost\",\"type\":\"uint256\"}],\"name\":\"ActionCostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"MessageOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"PetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"PetAdopted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_destChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"PetBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"PetFed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"PetRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"PetTreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"PetWalked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"featureId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"featureData\",\"type\":\"bytes\"}],\"name\":\"SendMessageWithFeature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exsig\",\"type\":\"address\"}],\"name\":\"SetExsig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxfee\",\"type\":\"uint256\"}],\"name\":\"SetMaxfee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"}],\"name\":\"SetMaxgas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shelterId\",\"type\":\"uint256\"}],\"name\":\"ShelterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shelterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ShelterManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shelterId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ShelterManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CHAINS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"endpoint\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"endpointExtended\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"FEATURES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"endpoint\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"endpointExtended\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_GATEWAY\",\"outputs\":[{\"internalType\":\"contract IFeatureGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20cl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSAGE_OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESSAGEv3\",\"outputs\":[{\"internalType\":\"contract IMessageV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shelterId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_personality\",\"type\":\"string\"}],\"name\":\"addPet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountant\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"addShelter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shelterId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addShelterManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"adoptPet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allShelters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availablePets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageV3\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_chains\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_endpoints\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_confirmations\",\"type\":\"uint16[]\"}],\"name\":\"configureClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageV3\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_chains\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_endpoints\",\"type\":\"bytes[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_confirmations\",\"type\":\"uint16[]\"}],\"name\":\"configureClientExtended\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_featureGateway\",\"type\":\"address\"}],\"name\":\"configureFeatureGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"feed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllShelters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailablePets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getLastMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getPet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastWalk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTreat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWalks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTreats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonations\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"personality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shelterId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"adopted\",\"type\":\"bool\"}],\"internalType\":\"struct AdoptAPet.PetData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shelterId\",\"type\":\"uint256\"}],\"name\":\"getShelter\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"}],\"internalType\":\"struct AdoptAPet.ShelterData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sourceChainId\",\"type\":\"uint256\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sourceChainId\",\"type\":\"uint256\"}],\"name\":\"isSelf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"messageProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextShelterId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastWalk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTreat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWalks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTreats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonations\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"personality\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shelterId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"adopted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shelterId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeShelterManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_actionCost\",\"type\":\"uint256\"}],\"name\":\"setActionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setExsig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFee\",\"type\":\"uint256\"}],\"name\":\"setMaxfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"}],\"name\":\"setMaxgas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shelterAccountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shelterManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shelters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMessageOwner\",\"type\":\"address\"}],\"name\":\"transferMessageOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"treat\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"walk\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configureClientExtended(address,uint256[],bytes[],uint16[])\":{\"notice\":\"OWNER \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdoptAPet.sol\":\"AdoptAPet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@vialabs-io/contracts/message/IERC20cl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// (c)2021-2024 Atlas\\n// security-contact: atlas@vialabs.io\\n\\npragma solidity ^0.8.9;\\n\\ninterface IERC20cl {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb7c37a94187039aeb162ff66c5b1366d93a2642f258b2c5767ce9f60f64ed14d\",\"license\":\"MIT\"},\"@vialabs-io/contracts/message/IMessageV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// (c)2021-2024 Atlas\\n// security-contact: atlas@vialabs.io\\n\\npragma solidity ^0.8.9;\\n\\ninterface IMessageV3 {\\n    event SendRequested(uint txId, address sender, address recipient, uint chain, bool express, bytes data, uint16 confirmations);\\n    event SendProcessed(uint txId, uint sourceChainId, address sender, address recipient);\\n    event Success(uint txId, uint sourceChainId, address sender, address recipient, uint amount);\\n    event ErrorLog(uint txId, string message);\\n    event SetExsig(address caller, address signer);\\n    event SetMaxgas(address caller, uint maxGas);\\n    event SetMaxfee(address caller, uint maxFee);\\n\\n    function chainsig() external view returns (address signer);\\n    function weth() external view returns (address wethTokenAddress);\\n    function feeToken() external view returns (address feeToken);\\n    function feeTokenDecimals() external view returns (uint feeTokenDecimals);\\n    function minFee() external view returns (uint minFee);\\n    function bridgeEnabled() external view returns (bool bridgeEnabled);\\n    function takeFeesOffline() external view returns (bool takeFeesOffline);\\n    function whitelistOnly() external view returns (bool whitelistOnly);\\n\\n    function enabledChains(uint destChainId) external view returns (bool enabled);\\n    function customSourceFee(address caller) external view returns (uint customSourceFee);\\n    function maxgas(address caller) external view returns (uint maxgas);\\n    function exsig(address caller) external view returns (address signer);\\n\\n    // @dev backwards compat with BridgeClient\\n    function minTokenForChain(uint chainId) external returns (uint amount);\\n\\n    function sendMessage(address recipient, uint chain, bytes calldata data, uint16 confirmations, bool express) external returns (uint txId);\\n    // @dev backwards compat with BridgeClient\\n    function sendRequest(address recipient, uint chainId, uint amount, address referrer, bytes calldata data, uint16 confirmations) external returns (uint txId);\\n\\n    function setExsig(address signer) external;\\n    function setMaxgas(uint maxgas) external;\\n    function setMaxfee(uint maxfee) external;\\n\\n    function getSourceFee(uint _destChainId, bool _express) external view returns (uint _fee);\\n}\",\"keccak256\":\"0xb806d4632a5a5dd5b1f2015bd213a70c99f6995ae59dcc617bd9a8bf3c8418c4\",\"license\":\"MIT\"},\"@vialabs-io/contracts/message/MessageClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// (c)2021-2024 Atlas\\n// security-contact: atlas@vialabs.io\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IMessageV3.sol\\\";\\nimport \\\"./IERC20cl.sol\\\";\\n\\ninterface IFeature {\\n    function getPayload(uint _txId) external view returns (bytes memory);\\n}\\n\\ninterface IFeatureGateway {\\n    function isFeatureEnabled(uint32) external view returns (bool);\\n    function featureAddresses(uint32) external view returns (address);\\n    function messageV3() external view returns (IMessageV3);\\n    function processForward(uint _txId, uint _sourceChainId, uint _destChainId, address _sender, address _recipient, uint _gas, bytes[] calldata _data) external;\\n    function process(uint txId, uint sourceChainId, uint destChainId, address sender, address recipient, uint gas, uint32 featureId, bytes calldata featureReply, bytes[] calldata data) external;\\n}\\n\\n/**\\n * @title MessageV3 Client\\n * @author Atlas <atlas@vialabs.io>\\n */\\nabstract contract MessageClient {\\n    IMessageV3 public MESSAGEv3;\\n    IERC20cl public FEE_TOKEN;\\n    IFeatureGateway public FEATURE_GATEWAY;\\n    mapping(uint => mapping(uint32 => ChainData)) public FEATURES;\\n\\n    struct ChainData {\\n        address endpoint; // address of this contract on specified chain\\n        bytes endpointExtended; // address of this contract on non EVM\\n        uint16 confirmations; // source confirmations\\n        bool extended; // are we using extended endpoint? (addresses larger than uint256)\\n    }\\n    mapping(uint => ChainData) public CHAINS;\\n    address public MESSAGE_OWNER;\\n\\n    modifier onlySelf(address _sender, uint _sourceChainId) {\\n        require(msg.sender == address(MESSAGEv3), \\\"MessageClient: not authorized\\\");\\n        require(_sender == CHAINS[_sourceChainId].endpoint, \\\"MessageClient: not authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveChain(uint _destinationChainId) {\\n        require(CHAINS[_destinationChainId].endpoint != address(0), \\\"MessageClient: destination chain not active\\\");\\n        _;\\n    }\\n\\n    modifier onlyMessageOwner() {\\n        require(msg.sender == MESSAGE_OWNER, \\\"MessageClient: not authorized\\\");\\n        _;\\n    }\\n\\n    event MessageOwnershipTransferred(address previousOwner, address newOwner);\\n    event RecoverToken(address owner, address token, uint amount);\\n    event SetMaxgas(address owner, uint maxGas);\\n    event SetMaxfee(address owner, uint maxfee);\\n    event SetExsig(address owner, address exsig);\\n    event SendMessageWithFeature(uint txId, uint destinationChainId, uint32 featureId, bytes featureData);\\n\\n    constructor() {\\n        MESSAGE_OWNER = msg.sender;\\n    }\\n\\n    function transferMessageOwnership(address _newMessageOwner) external onlyMessageOwner {\\n        MESSAGE_OWNER = _newMessageOwner;\\n        emit MessageOwnershipTransferred(msg.sender, _newMessageOwner);\\n    }\\n\\n    /** BRIDGE RECEIVER */\\n    // @dev DEPRICATED kept for backwards compatibility\\n    function messageProcess(\\n        uint _txId,          // transaction id\\n        uint _sourceChainId, // source chain id\\n        address _sender,     // corresponding MessageClient address on source chain\\n        address,\\n        uint,\\n        bytes calldata _data // encoded message from source chain\\n    ) external virtual onlySelf (_sender, _sourceChainId) {\\n        _processMessage(_txId, _sourceChainId, _data);\\n    }\\n\\n    // @dev PREFERRED if no Features used\\n    // this is extended by the implementing class if not using Features\\n    function _processMessage(uint _txId, uint _sourceChainId, bytes calldata _data) internal virtual {\\n        (uint32 _featureId, bytes memory _featureData, bytes memory _messageData) = abi.decode(_data, (uint32, bytes, bytes));\\n        \\n        // call the implementing class to process the message\\n        _processMessageWithFeature(_txId, _sourceChainId, _messageData, _featureId, _featureData, _getFeatureResponse(_featureId, _txId));\\n    }\\n\\n    // @dev REQUIRED if using Features\\n    // this is extended by the implementing class if using Features\\n    function _processMessageWithFeature(\\n        uint,         // transaction id\\n        uint,         // source chain id\\n        bytes memory, // encoded message from source chain\\n        uint32,       // feature id\\n        bytes memory, // encoded feature data\\n        bytes memory  // reply from feature processing off-chain\\n    ) internal virtual {\\n        revert(\\\"MessageClient: _processMessage or _processMessageWithFeature not implemented\\\");\\n    }\\n\\n    function _getFeatureResponse(uint32 _featureId, uint _txId) internal view returns (bytes memory) {\\n        return IFeature(FEATURE_GATEWAY.featureAddresses(_featureId)).getPayload(_txId);\\n    }\\n    \\n    /** BRIDGE SENDER */\\n    function _sendMessage(uint _destinationChainId, bytes memory _data) internal returns (uint _txId) {\\n        ChainData memory _chain = CHAINS[_destinationChainId];\\n        if(_chain.extended) { // non-evm addresses larger than uint256\\n            _data = abi.encode(_data, _chain.endpointExtended);\\n        }\\n        return IMessageV3(MESSAGEv3).sendMessage(\\n            _chain.endpoint,      // corresponding MessageClient contract address on destination chain\\n            _destinationChainId,  // id of the destination chain\\n            _data,                // arbitrary data package to send\\n            _chain.confirmations, // amount of required transaction confirmations\\n            false                 // send express mode on destination\\n        );\\n    }\\n\\n    function _sendMessageExpress(uint _destinationChainId, bytes memory _data) internal returns (uint _txId) {\\n        ChainData memory _chain = CHAINS[_destinationChainId];\\n        if(_chain.extended) { // non-evm addresses larger than uint256\\n            _data = abi.encode(_data, _chain.endpointExtended);\\n        }\\n        return IMessageV3(MESSAGEv3).sendMessage(\\n            _chain.endpoint,      // corresponding MessageV3Client contract address on destination chain\\n            _destinationChainId,  // id of the destination chain\\n            _data,                // arbitrary data package to send\\n            _chain.confirmations, // amount of required transaction confirmations\\n            true                  // send express mode on destination\\n        );\\n    }\\n\\n    function _sendMessageWithFeature(uint _destinationChainId, bytes memory _messageData, uint32 _featureId, bytes memory _featureData) internal returns (uint _txId) {\\n        require(FEATURE_GATEWAY.isFeatureEnabled(_featureId), \\\"MessageClient: feature not enabled\\\");\\n\\n        // wrap feature data into message data so it can be signed\\n        bytes memory _data = abi.encode(_featureId, _featureData, _messageData);\\n\\n        ChainData memory _chain = CHAINS[_destinationChainId];\\n        if(_chain.extended) { // non-evm addresses larger than uint256\\n            _data = abi.encode(_data, _chain.endpointExtended);\\n        }\\n\\n        _txId = IMessageV3(MESSAGEv3).sendMessage(\\n            _chain.endpoint,      // corresponding MessageV3Client contract address on destination chain\\n            _destinationChainId,  // id of the destination chain\\n            _data,                // arbitrary data package to send\\n            _chain.confirmations, // amount of required transaction confirmations\\n            false                 // send express mode on destination\\n        );\\n\\n        // signal we have feature data included with the message data\\n        emit SendMessageWithFeature(_txId, _destinationChainId, _featureId, _featureData);\\n    }\\n\\n    /** OWNER */\\n    function configureClientExtended(\\n        address _messageV3, // MessageV3 bridge address\\n        uint[] calldata _chains, // list of chains to accept as valid destinations\\n        bytes[] calldata _endpoints, // list of corresponding MessageV3Client addresses on each chain\\n        uint16[] calldata _confirmations // confirmations required on each chain before processing\\n    ) external onlyMessageOwner {\\n        uint _chainsLength = _chains.length;\\n        for(uint x=0; x < _chainsLength; x++) {\\n            CHAINS[_chains[x]].confirmations = _confirmations[x];\\n            CHAINS[_chains[x]].endpointExtended = _endpoints[x];\\n            CHAINS[_chains[x]].extended = true;\\n            CHAINS[_chains[x]].endpoint = address(1);\\n        }\\n\\n        _configureMessageV3(_messageV3);\\n    }\\n\\n    function configureClient(\\n        address _messageV3, // MessageV3 bridge address\\n        uint[] calldata _chains, // list of chains to accept as valid destinations\\n        address[] calldata _endpoints, // list of corresponding MessageV3Client addresses on each chain\\n        uint16[] calldata _confirmations // confirmations required on each chain before processing\\n    ) public onlyMessageOwner {\\n        uint _chainsLength = _chains.length;\\n        for(uint x=0; x < _chainsLength; x++) {\\n            CHAINS[_chains[x]].confirmations = _confirmations[x];\\n            CHAINS[_chains[x]].endpoint = _endpoints[x];\\n            CHAINS[_chains[x]].extended = false;\\n        }\\n\\n        _configureMessageV3(_messageV3);\\n    }\\n\\n    function configureFeatureGateway(address _featureGateway) external onlyMessageOwner {\\n        FEATURE_GATEWAY = IFeatureGateway(_featureGateway);\\n    }\\n\\n    function _configureMessageV3(address _messageV3) internal {\\n        MESSAGEv3 = IMessageV3(_messageV3);\\n        FEE_TOKEN = IERC20cl(MESSAGEv3.feeToken());\\n\\n        // approve bridge for source chain fees (limited per transaction with setMaxfee)\\n        if(address(FEE_TOKEN) != address(0)) {\\n            FEE_TOKEN.approve(address(MESSAGEv3), type(uint).max);\\n        }\\n\\n        // approve bridge for destination gas fees (limited per transaction with setMaxgas)\\n        if(address(MESSAGEv3.weth()) != address(0)) {\\n            IERC20cl(MESSAGEv3.weth()).approve(address(MESSAGEv3), type(uint).max);\\n        }\\n    }\\n\\n    function setExsig(address _signer) public onlyMessageOwner {\\n        MESSAGEv3.setExsig(_signer);\\n        emit SetExsig(msg.sender, _signer);\\n    }\\n\\n    function setMaxgas(uint _maxGas) public onlyMessageOwner {\\n        MESSAGEv3.setMaxgas(_maxGas);\\n        emit SetMaxgas(msg.sender, _maxGas);\\n    }\\n\\n    function setMaxfee(uint _maxFee) public onlyMessageOwner {\\n        MESSAGEv3.setMaxfee(_maxFee);\\n        emit SetMaxfee(msg.sender, _maxFee);\\n    }\\n\\n    function recoverToken(address _token, uint _amount) public onlyMessageOwner {\\n        if(_token == address(0)) {\\n            // payable(msg.sender).transfer(_amount);\\n            // @note Zk needs\\n            (bool success, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        } else {\\n            IERC20cl(_token).transfer(msg.sender, _amount);\\n        }\\n        emit RecoverToken(msg.sender, _token, _amount);\\n    }\\n\\n    function isSelf(address _sender, uint _sourceChainId) public view returns (bool) {\\n        if(_sender == CHAINS[_sourceChainId].endpoint) return true;\\n        return false;\\n    }\\n\\n    function isAuthorized(address _sender, uint _sourceChainId) public view returns (bool) {\\n        return isSelf(_sender, _sourceChainId);\\n    }\\n\\n    receive() external payable {}\\n    fallback() external payable {}\\n}\",\"keccak256\":\"0x453823944bffa61d5530f7e97202957c0e583b9a720bba561b75520fa32a0f37\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/AdoptAPet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// (c)2024 Atlas (atlas@vialabs.io)\\npragma solidity =0.8.17;\\n\\nimport \\\"@vialabs-io/contracts/message/MessageClient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\ncontract AdoptAPet is ERC721, ERC721Enumerable, Ownable, MessageClient {\\n    struct ShelterData {\\n        string name;\\n        string location;\\n        string website;\\n        string email;\\n        address accountant;\\n    }\\n\\n    struct PetData {\\n        uint lastWalk;\\n        uint lastFeed;\\n        uint lastTreat;\\n\\n        uint totalWalks;\\n        uint totalFeeds;\\n        uint totalTreats;\\n\\n        uint totalDonations;\\n\\n        string name;\\n        string personality;\\n        string image;\\n        uint shelterId;\\n        bool adopted;\\n    }\\n\\n    uint public nextNftId;\\n    uint public nextShelterId;\\n    mapping(uint => string) public messages;\\n    mapping(uint => PetData) public pets;\\n    mapping(uint => ShelterData) public shelters;\\n    mapping(uint => mapping(address => bool)) public shelterManagers;\\n    mapping(uint => address) public shelterAccountant;\\n\\n    uint[] public allShelters;\\n    uint[] public availablePets;\\n\\n    uint public actionCost = 0.001 ether;\\n\\n    event MetadataUpdate(uint256 _nftId);\\n    event ShelterAdded(uint256 _shelterId);\\n    event ShelterManagerAdded(uint256 _shelterId, address _manager);\\n    event ShelterManagerRemoved(uint256 _shelterId, address _manager);\\n    event PetAdded(uint256 _nftId);\\n    event PetAdopted(uint256 _nftId);\\n    event PetRescued(uint256 _nftId);\\n    event PetWalked(uint256 _nftId);\\n    event PetFed(uint256 _nftId);\\n    event PetTreated(uint256 _nftId);\\n    event PetBridged(uint256 _nftId, uint256 _destChainId, address _recipient);\\n    event ActionCostSet(uint256 _actionCost);\\n\\n    constructor() ERC721(\\\"Adopt A Pet\\\", \\\"AAP\\\") {\\n        nextNftId = block.chainid * 10**4;\\n        nextShelterId = block.chainid * 10**4;\\n    }\\n\\n    function walk(uint _nftId) external payable {\\n        require(msg.value >= actionCost, \\\"AdoptAPet: Insufficient funds\\\");\\n        require(ownerOf(_nftId) == msg.sender, \\\"AdoptAPet: caller is not the owner of the nft\\\");\\n\\n        payable(shelterAccountant[pets[_nftId].shelterId]).transfer(msg.value);\\n\\n        pets[_nftId].lastWalk = block.timestamp;\\n        pets[_nftId].totalWalks++;\\n        pets[_nftId].totalDonations += msg.value;\\n\\n        emit MetadataUpdate(_nftId);\\n        emit PetWalked(_nftId);\\n    }\\n\\n    function feed(uint _nftId) external payable {\\n        require(msg.value >= actionCost, \\\"AdoptAPet: Insufficient funds\\\");\\n        require(ownerOf(_nftId) == msg.sender, \\\"AdoptAPet: caller is not the owner of the nft\\\");\\n\\n        payable(shelterAccountant[pets[_nftId].shelterId]).transfer(msg.value);\\n\\n        PetData storage pet = pets[_nftId];\\n        pet.lastFeed = block.timestamp;\\n        pet.totalFeeds++;\\n        pets[_nftId].totalDonations += msg.value;\\n\\n        emit MetadataUpdate(_nftId);\\n        emit PetFed(_nftId);\\n    }\\n\\n    function treat(uint _nftId) external payable {\\n        require(msg.value >= actionCost, \\\"AdoptAPet: Insufficient funds\\\");\\n        require(ownerOf(_nftId) == msg.sender, \\\"AdoptAPet: caller is not the owner of the nft\\\");\\n\\n        payable(shelterAccountant[pets[_nftId].shelterId]).transfer(msg.value);\\n\\n        PetData storage pet = pets[_nftId];\\n        pet.lastTreat = block.timestamp;\\n        pet.totalTreats++;\\n        pets[_nftId].totalDonations += msg.value;\\n\\n        emit MetadataUpdate(_nftId);\\n        emit PetTreated(_nftId);\\n    }\\n\\n    function rescue(uint _nftId) external payable {\\n        require(msg.value >= actionCost, \\\"AdoptAPet: Insufficient funds\\\");\\n        require(_exists(_nftId), \\\"AdoptAPet: Pet does not exist\\\");\\n\\n        PetData storage pet = pets[_nftId];\\n        require(pet.adopted == false, \\\"AdoptAPet: Pet is already adopted\\\");\\n\\n        if(\\n            pet.lastFeed < block.timestamp - 7 days ||\\n            pet.lastWalk < block.timestamp - 7 days ||\\n            pet.lastTreat < block.timestamp - 7 days\\n         ) {\\n            _transfer(ownerOf(_nftId), msg.sender, _nftId);\\n            emit PetRescued(_nftId);\\n        } else {\\n            revert(\\\"AdoptAPet: Pet is being taken care of. Cannot return to shelter.\\\");\\n        }\\n    }\\n\\n    function getLastMessage(uint _nftId) external view returns (string memory) {\\n        return messages[_nftId];\\n    }\\n\\n    function getAllShelters() external view returns (uint[] memory) {\\n        return allShelters;\\n    }\\n\\n    function getShelter(uint _shelterId) external view returns (ShelterData memory) {\\n        return shelters[_shelterId];\\n    }\\n\\n    function getAvailablePets() external view returns (uint[] memory) {\\n        return availablePets;\\n    }\\n\\n    function getPet(uint _nftId) external view returns (PetData memory) {\\n        return pets[_nftId];\\n    }\\n\\n    function adoptPet(uint _nftId) external payable {\\n        require(_exists(_nftId), \\\"AdoptAPet: Pet does not exist\\\");\\n        require(msg.value >= actionCost, \\\"AdoptAPet: Insufficient funds\\\");\\n        require(ownerOf(_nftId) == address(this), \\\"AdoptAPet: Already adopted by someone\\\");\\n\\n        payable(shelterAccountant[pets[_nftId].shelterId]).transfer(msg.value);\\n\\n        pets[_nftId].lastWalk = block.timestamp - 1 days;\\n        pets[_nftId].lastFeed = block.timestamp - 3 days;\\n        pets[_nftId].lastTreat = block.timestamp - 5 days;\\n        pets[_nftId].totalDonations += msg.value;\\n\\n        _transfer(address(this), msg.sender, _nftId);\\n        \\n        emit PetAdopted(_nftId);\\n    }\\n\\n    // Admin Functions\\n    function addShelter(address _accountant, string memory _name, string memory _location, string memory _website, string memory _email) external onlyOwner {\\n        ShelterData storage shelter = shelters[nextShelterId];\\n        shelters[nextShelterId].name = _name;\\n        shelter.location = _location;\\n        shelter.website = _website;\\n        shelter.email = _email;\\n        shelter.accountant = _accountant;\\n\\n        allShelters.push(nextShelterId);\\n        emit ShelterAdded(nextShelterId);\\n        \\n        nextShelterId++;\\n    }\\n\\n    function setActionCost(uint _actionCost) external onlyOwner {\\n        actionCost = _actionCost;\\n        emit ActionCostSet(actionCost);\\n    }\\n\\n    function addShelterManager(uint _shelterId, address _manager) external onlyOwner {\\n        shelterManagers[_shelterId][_manager] = true;\\n        emit ShelterManagerAdded(_shelterId, _manager);\\n    }\\n\\n    function removeShelterManager(uint _shelterId, address _manager) external onlyOwner {\\n        delete shelterManagers[_shelterId][_manager];\\n        emit ShelterManagerRemoved(_shelterId, _manager);\\n    }\\n\\n    // Shelter Functions\\n    function addPet(uint _shelterId, string memory _name, string memory _image, string memory _personality) external {\\n        require(shelterManagers[_shelterId][msg.sender], \\\"AdoptAPet: caller is not a manager of the shelter\\\");\\n\\n        _mint(address(this), nextNftId);\\n\\n        PetData storage pet = pets[nextNftId];\\n        pet.name = _name;\\n        pet.personality = _personality;\\n        pet.shelterId = _shelterId;\\n        pet.image = _image;\\n\\n        availablePets.push(nextNftId);\\n        emit PetAdded(nextNftId);\\n\\n        nextNftId++;\\n    }\\n\\n    function bridge(uint _destChainId, address _recipient, uint _nftId) external onlyActiveChain(_destChainId) {\\n        require(ownerOf(_nftId) == msg.sender, \\\"AdoptAPet: caller is not the owner of the nft\\\");\\n\\n        bytes memory _nftMetadata = abi.encode(\\n            pets[_nftId].name,\\n            pets[_nftId].image,\\n            pets[_nftId].personality,\\n            pets[_nftId].shelterId,\\n            pets[_nftId].lastWalk,\\n            pets[_nftId].lastFeed,\\n            pets[_nftId].lastTreat,\\n            pets[_nftId].totalDonations,\\n            pets[_nftId].totalWalks,\\n            pets[_nftId].totalFeeds,\\n            pets[_nftId].totalTreats,\\n            pets[_nftId].adopted\\n        );\\n\\n        _burn(_nftId);\\n\\n        _sendMessage(_destChainId, abi.encode(_recipient, _nftId, _nftMetadata));\\n\\n        emit PetBridged(_nftId, _destChainId, _recipient);\\n    }\\n\\n    function messageProcess(uint, uint _sourceChainId, address _sender, address, uint, bytes calldata _data) external override  onlySelf(_sender, _sourceChainId)  {\\n        // decode message\\n        (address _recipient, uint _nftId, bytes memory _nftMetadata) = abi.decode(_data, (address, uint, bytes));\\n\\n        // parse metadata\\n        (\\n            string memory _name, \\n            string memory _image,\\n            string memory _personality, \\n            uint _shelterId, \\n            uint _lastWalk, \\n            uint _lastFeed, \\n            uint _lastTreat, \\n            uint _totalDonations,\\n            uint _totalWalks, \\n            uint _totalFeeds, \\n            uint _totalTreats,\\n            bool _adopted\\n        ) = abi.decode(_nftMetadata, (string, string, string, uint, uint,  uint, uint, uint, uint, uint, uint, bool));\\n\\n        // store metadata\\n        pets[_nftId] = PetData({\\n            name: _name,\\n            image: _image,\\n            personality: _personality,\\n            shelterId: _shelterId,\\n            lastWalk: _lastWalk,\\n            lastFeed: _lastFeed,\\n            lastTreat: _lastTreat,\\n            totalDonations: _totalDonations,\\n            totalWalks: _totalWalks,\\n            totalFeeds: _totalFeeds,\\n            totalTreats: _totalTreats,\\n            adopted: _adopted\\n        });\\n\\n        // mint tokens\\n        _mint(_recipient, _nftId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return string(abi.encodePacked('data:application/json;base64,', \\n            Base64.encode(bytes(abi.encodePacked(\\n                \\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Adopt A Pet #\\\", uint2str(tokenId), \\\"\\\\\\\",\\\",\\n                \\\"\\\\\\\"description\\\\\\\":\\\\\\\"Adopt A Pet NFT\\\\\\\",\\\",\\n                \\\"\\\\\\\"image\\\\\\\":\\\\\\\"\\\", string(pets[tokenId].image), \\\"\\\\\\\",\\\",\\n                \\\"\\\\\\\"attributes\\\\\\\":[\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Name\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", string(pets[tokenId].name), \\\"\\\\\\\"},\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Last Walk\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", uint2str(pets[tokenId].lastWalk), \\\"\\\\\\\"},\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Last Feed\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", uint2str(pets[tokenId].lastFeed), \\\"\\\\\\\"},\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Last Treat\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", uint2str(pets[tokenId].lastTreat), \\\"\\\\\\\"},\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Total Walks\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", uint2str(pets[tokenId].totalWalks), \\\"\\\\\\\"},\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Total Feeds\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", uint2str(pets[tokenId].totalFeeds), \\\"\\\\\\\"},\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Total Treats\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", uint2str(pets[tokenId].totalTreats), \\\"\\\\\\\"},\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Total Donations\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", uint2str(pets[tokenId].totalDonations), \\\"\\\\\\\"},\\\",\\n                    \\\"{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Adopted\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\", pets[tokenId].adopted ? \\\"true\\\" : \\\"false\\\", \\\"\\\\\\\"}\\\",\\n                \\\"]}\\\"\\n            )))\\n        ));\\n\\n    }\\n\\n    function walletOfOwner(address owner) public view returns (uint256[] memory) {\\n        uint256 ownerTokenCount = balanceOf(owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i = 0; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory) {\\n        if (_i == 0) return \\\"0\\\";\\n    \\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        \\n        bytes memory bstr = new bytes(len);\\n        while (_i != 0) {\\n            len -= 1;\\n            bstr[len] = bytes1(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\",\"keccak256\":\"0xba3859a5d727b716d0359326460621c48d8205ee716ab22645360a88e476e5be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200039e576001600160401b03906040908082018381118282101762000388578252600b81526020906a10591bdc1d08104814195d60aa1b828201528251938385018581108282111762000388578452600385526204141560ec1b83860152815181811162000388576000938454916001948584811c941680156200037d575b8385101462000369578190601f9485811162000316575b508390858311600114620002b2578892620002a6575b5050600019600383901b1c191690851b1785555b8651928311620002925783548481811c9116801562000287575b8282101462000273578281116200022b575b5080918311600114620001c4575083949582939492620001b8575b5050600019600383901b1c191690821b1790555b600a8054336001600160a01b03198083168217909355935193906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a33390601054161760105566038d7ea4c68000601a5561271090814602914683041446151715620001a45750806011556012556154319081620003a48239f35b634e487b7160e01b81526011600452602490fd5b0151905038806200010a565b90601f198316968486528286209286905b89821062000213575050838596979810620001f9575b505050811b0190556200011e565b015160001960f88460031b161c19169055388080620001eb565b808785968294968601518155019501930190620001d5565b8486528186208380860160051c82019284871062000269575b0160051c019085905b8281106200025d575050620000ef565b8781550185906200024d565b9250819262000244565b634e487b7160e01b86526022600452602486fd5b90607f1690620000dd565b634e487b7160e01b85526041600452602485fd5b015190503880620000af565b8880528489208894509190601f1984168a5b87828210620002ff5750508411620002e5575b505050811b018555620000c3565b015160001960f88460031b161c19169055388080620002d7565b8385015186558b97909501949384019301620002c4565b9091508780528388208580850160051c8201928686106200035f575b918991869594930160051c01915b8281106200035057505062000099565b8a815585945089910162000340565b9250819262000332565b634e487b7160e01b87526022600452602487fd5b93607f169362000082565b634e487b7160e01b600052604160045260246000fd5b600080fdfe60806040526004361015610018575b361561001657005b005b60003560e01c806301ffc9a7146104f257806302b3b368146104e95780630581f59d146104e057806306fdde03146104d7578063081812fc146104ce578063095ea7b3146104c55780630d029802146104bc5780630d80fefd146103c057806318160ddd146104b357806319b81577146104aa57806320bfe3421461049857806323b872dd146104a15780632972b0f0146104985780632ee02d7c1461048f5780632f745c59146104865780632f820a5f1461047d57806342842e0e14610474578063438b63001461046b5780634f139b49146104625780634f154c54146104595780634f6ccce714610450578063559b2f6514610447578063585c7edd1461043e57806359d55194146104355780635b77a6a61461042c5780635f46e740146104235780636352211e1461041a5780636ac053ad146104115780637044cd7e1461040857806370a08231146103ff578063715018a6146103f657806373717b08146103ed578063788063f0146103e4578063794b4643146103db5780637a29fa66146103d25780637b84044d146103c9578063823a1db1146103c0578063853c75d8146103b75780638da5cb5b146103ae57806392ae12fd146103a557806393f1da4f1461039c57806395d89b41146103935780639877f2f31461038a578063a22cb46514610381578063a2db916914610378578063a6bc4d671461036f578063a771ac1514610366578063b29a81401461035d578063b479a96114610354578063b7f494a41461034b578063b88d4fde14610342578063bb0b983014610339578063bd3d9a2114610330578063c60853f614610327578063c87b56dd1461031e578063c96fba4014610315578063cfb869bf1461030c578063e47ad74d14610303578063e985e9c5146102fa578063f2fde38b146102f1578063f52a9198146102e8578063f59dfdfb146102df5763f71941380361000e576102da6130c9565b61000e565b506102da613004565b506102da612fa0565b506102da612ed7565b506102da612e7a565b506102da612d98565b506102da612d02565b506102da612c6d565b506102da612762565b506102da612685565b506102da612650565b506102da612626565b506102da6125cf565b506102da61248a565b506102da6123a2565b506102da612289565b506102da6121f8565b506102da61205f565b506102da611f06565b506102da611d9c565b506102da611cfa565b506102da611c54565b506102da611c35565b506102da611bcc565b506102da611b6b565b506102da611b41565b506102da610bfe565b506102da611aac565b506102da611a5a565b506102da611a3b565b506102da6119e9565b506102da6119a8565b506102da611949565b506102da611921565b506102da611885565b506102da6116c7565b506102da6116a8565b506102da611638565b506102da6115e1565b506102da611552565b506102da61141e565b506102da611391565b506102da6112e5565b506102da61125d565b506102da611210565b506102da61116a565b506102da6110e8565b506102da611044565b506102da611010565b506102da610f0e565b506102da610de1565b506102da610e43565b506102da610c6f565b506102da610c50565b506102da610a3d565b506102da610964565b506102da610922565b506102da61083e565b506102da610702565b506102da61059b565b506102da610512565b6001600160e01b031981160361050d57565b600080fd5b503461050d57602036600319011261050d576020600435610532816104fb565b63ffffffff60e01b1663780e9d6360e01b8114908115610558575b506040519015158152f35b6380ac58cd60e01b81149150811561058a575b8115610579575b503861054d565b6301ffc9a760e01b14905038610572565b635b5e139f60e01b8114915061056b565b50602036600319011261050d577f270b33e55d2417c1b1aef69f10fe745f3b7c907307cd45c038ef7f5490d655326106e66004356105dd601a54341015613dfa565b6105f96105e982613235565b6001600160a01b03163314613e46565b600080808061064b61063f61063f610632600a6106208a6000526014602052604060002090565b01546000526017602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b819034156106f8575b3491f1156106eb575b6005610673826000526014602052604060002090565b426002820155016106848154613942565b9055600661069c826000526014602052604060002090565b016106a8348254613ecc565b90556040518181527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790602090a16040519081529081906020820190565b0390a1005b6106f361370a565b61065d565b6108fc9150610654565b50602036600319011261050d577f01907761d11c22471f309f9f408da0f1f10120847e63448528be36911ab6bca16106e6600435610744601a54341015613dfa565b6107506105e982613235565b600080808061077761063f61063f610632600a6106208a6000526014602052604060002090565b819034156107cd575b3491f1156107c0575b4261079e826000526014602052604060002090565b5560036107b5826000526014602052604060002090565b016106848154613942565b6107c861370a565b610789565b6108fc9150610780565b600091031261050d57565b60005b8381106107f55750506000910152565b81810151838201526020016107e5565b9060209161081e815180928185528580860191016107e2565b601f01601f1916010190565b90602061083b928181520190610805565b90565b503461050d5760008060031936011261091f576040519080805461086181610a67565b808552916001918083169081156108f5575060011461089b575b6108978561088b81870382610bc0565b6040519182918261082a565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106108dd57505050810160200161088b8261089761087b565b805460208587018101919091529093019281016108c2565b8695506108979693506020925061088b94915060ff191682840152151560051b820101929361087b565b80fd5b503461050d57602036600319011261050d5760206109416004356132ca565b6040516001600160a01b039091168152f35b6001600160a01b0381160361050d57565b503461050d57604036600319011261050d5760043561098281610953565b60243561098e81613235565b916001600160a01b0380841690821681146109ee57610016936109bb9133149081156109c0575b50613258565b613660565b6001600160a01b0316600090815260056020908152604080832033845290915290205460ff169050386109b5565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461050d57600036600319011261050d57600b546040516001600160a01b039091168152602090f35b90600182811c92168015610a97575b6020831014610a8157565b634e487b7160e01b600052602260045260246000fd5b91607f1691610a76565b9060009291805491610ab283610a67565b918282526001938481169081600014610b145750600114610ad4575b50505050565b90919394506000526020928360002092846000945b838610610b00575050505001019038808080610ace565b805485870183015294019385908201610ae9565b9294505050602093945060ff191683830152151560051b01019038808080610ace565b50634e487b7160e01b600052604160045260246000fd5b61018081019081106001600160401b03821117610b6a57604052565b610b72610b37565b604052565b60a081019081106001600160401b03821117610b6a57604052565b6001600160401b038111610b6a57604052565b604081019081106001600160401b03821117610b6a57604052565b90601f801991011681019081106001600160401b03821117610b6a57604052565b90610bfc610bf59260405193848092610aa1565b0383610bc0565b565b503461050d57602036600319011261050d576004356000526013602052610897610c35610c3c604060002060405192838092610aa1565b0382610bc0565b604051918291602083526020830190610805565b503461050d57600036600319011261050d576020600854604051908152f35b50602036600319011261050d576004356000818152600260205260409020547f87b11a36a7d8951907601f47f6fa4a32bffadebbff2e4894922b25922d340d85916106e691610cc8906001600160a01b03161515613ed9565b610cd6601a54341015613dfa565b610cf2610ce282613235565b6001600160a01b03163014614063565b6000808080610d1961063f61063f610632600a6106208a6000526014602052604060002090565b81903415610dd7575b3491f115610dca575b610d3442613f7b565b610d48826000526014602052604060002090565b55610d5242613f8c565b6001610d68836000526014602052604060002090565b0155610d7342613f9d565b6002610d89836000526014602052604060002090565b01556006610da1826000526014602052604060002090565b01610dad348254613ecc565b9055610dba8133306134f8565b6040519081529081906020820190565b610dd261370a565b610d2b565b6108fc9150610d22565b503461050d57604036600319011261050d576020610e0d600435610e0481610953565b60243590613dce565b6040519015158152f35b606090600319011261050d57600435610e2f81610953565b90602435610e3c81610953565b9060443590565b503461050d57610016610e5536610e17565b91610e68610e638433613426565b613308565b6134f8565b9181601f8401121561050d578235916001600160401b03831161050d576020808501948460051b01011161050d57565b608060031982011261050d57600435610eb581610953565b916001600160401b0360243581811161050d5783610ed591600401610e6d565b9390939260443583811161050d5782610ef091600401610e6d565b9390939260643591821161050d57610f0a91600401610e6d565b9091565b503461050d57610f1d36610e9d565b610f3960018060a0989794989695961b036010541633146138df565b60005b828110610f4c5761001688613ae9565b80611006610fb0888888610ff1868a8f610f6d61100b9b8d610f729361395e565b61397c565b95610f7e83838361395e565b35600052610fb0610fb584600f986020988a8a5260029c8d9c60409d8e600020019061ffff1661ffff19825416179055565b61395e565b35610fbf81610953565b610fca85858561395e565b35600052878752886000209060018060a01b03166001600160601b0360a01b825416179055565b35600052526000200162ff0000198154169055565b613942565b610f3c565b503461050d57604036600319011261050d57602061103c60043561103381610953565b60243590613851565b604051908152f35b503461050d57606036600319011261050d5760243560043561106582610953565b6000818152600f60205260409020546001600160a01b03161561108f576100169160443591614604565b60405162461bcd60e51b815260206004820152602b60248201527f4d657373616765436c69656e743a2064657374696e6174696f6e20636861696e60448201526a206e6f742061637469766560a81b6064820152608490fd5b503461050d576100166110fa36610e17565b9060405192602084018481106001600160401b03821117611122575b6040526000845261339b565b61112a610b37565b611116565b6020908160408183019282815285518094520193019160005b828110611156575050505090565b835185529381019392810192600101611148565b503461050d5760208060031936011261050d576004359061118a82610953565b61119382613172565b9061119d82615014565b926111ab6040519485610bc0565b828452601f196111ba84615014565b01368386013760005b8381106111d85760405180610897878261112f565b806111e66111fe9284613851565b8651821015611203575b848260051b88010152613942565b6111c3565b61120b6119d2565b6111f0565b503461050d57602036600319011261050d577fc01bd9c884731622f1af5796e1e37246a27b50e2999f80f11e30e9ed2e3a1868602060043561125061311a565b80601a55604051908152a1005b503461050d57600036600319011261050d57604051806019549182815260208091019260196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695916000905b8282106112ce57610897856112c281890382610bc0565b6040519182918261112f565b8354865294850194600193840193909101906112ab565b503461050d57602036600319011261050d576004356008548110156113375760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b503461050d57602036600319011261050d577fe1a25f463c6504824e91268b5b2c05658d5358c9c1698a85346cfae5336a642e6106e66004356113d381610953565b6010546001600160a01b036113eb33828416146138df565b6001600160a01b031990911690821617601055604080513381526001600160a01b03909216602083015290918291820190565b503461050d57600036600319011261050d57604051806018549182815260208091019260186000527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e916000905b82821061148357610897856112c281890382610bc0565b83548652948501946001938401939091019061146c565b61083b906020815282516020820152602083015160408201526040830151606082015260608301516080820152608083015160a082015260a083015160c082015260c083015160e082015260e0830151926101809061153b6115096101009684888701526101a0860190610805565b95820151611526601f199761012092898883030184890152610805565b90830151610140978683030188870152610805565b948101516101608481019190915201511515910152565b503461050d57602036600319011261050d576108976115d56040610160815161157a81610b4e565b600091818380935282602082015282858201528260608201528260808201528260a08201528260c0820152606060e0820152606061010082015260606101208201528261014082015201526004358152601460205220613fbf565b6040519182918261149a565b503461050d57604036600319011261050d57602060ff61162c60243561160681610953565b6004356000526016845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b503461050d5760c036600319011261050d5760443561165681610953565b611661606435610953565b60a435906001600160401b039081831161050d573660238401121561050d57826004013591821161050d57366024838501011161050d576024610016930190602435614a94565b503461050d57602036600319011261050d576020610941600435613235565b50602036600319011261050d576004356116e5601a54341015613dfa565b600081815260026020526040902054611708906001600160a01b03161515613ed9565b61171c816000526014602052604060002090565b61173361172d600b83015460ff1690565b15613f25565b600181015461174142613fae565b11908115611813575b81156117fd575b5015611790576106e681610dba816117897f6e8cd1f70db1aa72284733203457cea2522ddaeb381b13f68877ae170f8147ca95613235565b33906134f8565b6040805162461bcd60e51b81526020600482015260248101919091527f41646f7074415065743a20506574206973206265696e672074616b656e20636160448201527f7265206f662e2043616e6e6f742072657475726e20746f207368656c7465722e6064820152608490fd5b60029150015461180c42613fae565b1138611751565b8091505461182042613fae565b119061174a565b93906080936118596118759461184b611867949a999a60a08a5260a08a0190610805565b9088820360208a0152610805565b908682036040880152610805565b908482036060860152610805565b6001600160a01b03909416910152565b503461050d57602036600319011261050d576004356000526015602052604080600020906108978151916118c4836118bd8187610aa1565b0384610bc0565b8051936118df856118d88160018501610aa1565b0386610bc0565b81516118f281610c358160028601610aa1565b825191611906836118bd8160038501610aa1565b6004015492519586956001600160a01b039094169386611827565b503461050d57602036600319011261050d57602061103c60043561194481610953565b613172565b503461050d5760008060031936011261091f5761196461311a565b600a80546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461050d57600036600319011261050d57600c546040516001600160a01b039091168152602090f35b50634e487b7160e01b600052603260045260246000fd5b503461050d57602036600319011261050d5760043560195481101561050d5760209060196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950154604051908152f35b503461050d57600036600319011261050d576020601254604051908152f35b503461050d57602036600319011261050d5760043560185481101561050d5760209060186000527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0154604051908152f35b503461050d57604036600319011261050d577fd8b7d7a23c5842ffa9123c6ca5422f27d20e7eb242f4afb8f45f871e5b9537c9602435600435611aee82610953565b611af661311a565b60008181526016602090815260408083206001600160a01b03861684529091529020805460ff19169055604080519182526001600160a01b03909216602082015290819081016106e6565b503461050d57600036600319011261050d576010546040516001600160a01b039091168152602090f35b503461050d57600036600319011261050d57600a546040516001600160a01b039091168152602090f35b92949390611bbe60609361ffff9260018060a01b03168652608060208701526080860190610805565b951660408401521515910152565b503461050d57602036600319011261050d57600435600052600f602052604060002060018060a01b0381541690610897600260405192611c1a84611c138160018501610aa1565b0385610bc0565b015460405193849361ffff60ff8460101c1693169185611b95565b503461050d57600036600319011261050d576020601154604051908152f35b503461050d5760008060031936011261091f5760405190806001805491611c7a83610a67565b808652928281169081156108f55750600114611ca0576108978561088b81870382610bc0565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410611ce257505050810160200161088b8261089761087b565b80546020858701810191909152909301928101611cc7565b503461050d57604036600319011261050d577fecf4bb70ae42517181404f9ef6d941228f6c18e8d51f9bf514419aa6631d304a602435600435611d3c82610953565b611d4461311a565b60008181526016602090815260408083206001600160a01b03861684529091529020805460ff19166001179055604080519182526001600160a01b03909216602082015290819081016106e6565b8015150361050d57565b503461050d57604036600319011261050d57600435611dba81610953565b602435611dc681611d92565b6001600160a01b03821691338314611e485781611e05611e169233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b6020815260a0611ef3611eab845183602086015260c0850190610805565b611ede611eca602087015192601f199384888303016040890152610805565b604087015183878303016060880152610805565b90606086015190858303016080860152610805565b926080600180841b039101511691015290565b503461050d57602036600319011261050d576108976040805190611f2982610b77565b600060806060938481528460208201528484820152848082015201526004356000526015602052611fd7611fc7600483600020845195611f6887610b77565b8551611f7881610c358186610aa1565b87528551611f8d81610c358160018701610aa1565b60208801528551611fa581610c358160028701610aa1565b86880152611fb560038301610be1565b9087015201546001600160a01b031690565b6001600160a01b03166080840152565b5191829182611e8d565b60405190610bfc82610b4e565b6020906001600160401b03811161200b575b601f01601f19160190565b612013610b37565b612000565b81601f8201121561050d5780359061202f82611fee565b9261203d6040519485610bc0565b8284526020838301011161050d57816000926020809301838601378301015290565b503461050d57608036600319011261050d576004356001600160401b0360243581811161050d57612094903690600401612018565b60443582811161050d576120ac903690600401612018565b9160643590811161050d576120c5903690600401612018565b9083600052601660205260ff6120f060406000203360018060a01b0316600052602052604060002090565b541615612199576121449361213960099361210d60115430614458565b6121306121266011546000526014602052604060002090565b9460078601614270565b60088401614270565b600a82015501614270565b61214f6011546143a8565b6100166121946011547ff825db3e178c42c2ac2b80d9c8c675cb849fbaff1f0975fa5379016980f41b1f6040518061218c84829190602083019252565b0390a1613942565b601155565b60405162461bcd60e51b815260206004820152603160248201527f41646f7074415065743a2063616c6c6572206973206e6f742061206d616e616760448201527032b91037b3103a34329039b432b63a32b960791b6064820152608490fd5b503461050d5760a036600319011261050d5760043561221681610953565b6001600160401b039060243582811161050d57612237903690600401612018565b60443583811161050d5761224f903690600401612018565b60643584811161050d57612267903690600401612018565b9160843594851161050d57612283610016953690600401612018565b936140bd565b503461050d57604036600319011261050d577f16a1412f01b73c390eb2548427101644aa86c1443c272f73df00fb74c48fe4996004356122c881610953565b6024359060018060a01b036122e2816010541633146138df565b81168061232b5750612304600080808086335af16122fe613717565b50613d90565b604080513381526001600160a01b03909216602083015281019190915280606081016106e6565b60405163a9059cbb60e01b81523360048201526024810184905290602090829060449082906000905af18015612395575b612367575b50612304565b6123879060203d811161238e575b61237f8183610bc0565b810190613ad4565b5038612361565b503d612375565b61239d61370a565b61235c565b503461050d576000602036600319011261091f576004358160018060a01b036123d0816010541633146138df565b600b5416803b1561248657819060246040518094819363b479a96160e01b83528760048401525af18015612479575b612442575b506040805133815260208101929092527f7b6bdf5a54b984bdb41e777eb126123085d57633ab56d408d9a1d39dd894e7bb9190819081015b0390a180f35b7f7b6bdf5a54b984bdb41e777eb126123085d57633ab56d408d9a1d39dd894e7bb919261247161243c92610b92565b929150612404565b61248161370a565b6123ff565b5080fd5b503461050d5761249936610e9d565b6124b460018060a09998969497991b036010541633146138df565b60005b8781106124c75761001687613ae9565b6124d5610f6d82848961395e565b906124e1818a8861395e565b356000526020600f8152612509600293846040600020019061ffff1661ffff19825416179055565b858210156125c2575b8160051b850135601e198636030181121561050d578501908135916001600160401b03831161050d570192813603841361050d57612579612599926125bd9560016125738f88612562918f61395e565b35600052600f602052604060002090565b016139df565b612587612562848d8b61395e565b01805462ff0000191662010000179055565b6110066125aa612562838c8a61395e565b80546001600160a01b0319166001179055565b6124b7565b6125ca6119d2565b612512565b503461050d57608036600319011261050d576004356125ed81610953565b6024356125f981610953565b606435916001600160401b03831161050d5761261c610016933690600401612018565b916044359161339b565b503461050d57600036600319011261050d57600d546040516001600160a01b039091168152602090f35b503461050d57602036600319011261050d576004356000526017602052602060018060a01b0360406000205416604051908152f35b503461050d57602036600319011261050d576004356126a381610953565b6010546001600160a01b03906126bc90821633146138df565b80600b541691823b1561050d576000807f3785abad972484d82ebc033d8eb190737cd209b24e7f853dd622e415c3f537a29460246106e695604051948593849263630429fb60e11b8452881660048401525af18015612755575b61273c575b50604080513381526001600160a01b03909216602083015290918291820190565b8061274961274f92610b92565b806107d7565b3861271b565b61275d61370a565b612716565b503461050d57602036600319011261050d5760043560008181526002602052604090205461279a906001600160a01b03161515614d2a565b6127a381615341565b60096127b9836000526014602052604060002090565b019160076127d1826000526014602052604060002090565b01906127f06127ea826000526014602052604060002090565b54615341565b6128106001612809846000526014602052604060002090565b0154615341565b6128296002612809856000526014602052604060002090565b6128426003612809866000526014602052604060002090565b9061285c6004612809876000526014602052604060002090565b926128766005612809886000526014602052604060002090565b946128b1600b6128a961289860066128098c6000526014602052604060002090565b996000526014602052604060002090565b015460ff1690565b15612c5f576128be614daf565b975b604051757b226e616d65223a2241646f7074204120506574202360501b60208201529a8b9a60368c016128f291614dcf565b61088b60f21b81526002017f226465736372697074696f6e223a2241646f7074204120506574204e4654222c8152602001681134b6b0b3b2911d1160b91b815260090161293e91614de2565b61088b60f21b81526002016d2261747472696275746573223a5b60901b8152600e017f7b2274726169745f74797065223a224e616d65222c2276616c7565223a2200008152601e0161298f91614de2565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a224c6173742057616c6b222c2276616c7565815262111d1160e91b60208201526023016129d691614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a224c6173742046656564222c2276616c7565815262111d1160e91b6020820152602301612a1d91614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a224c617374205472656174222c2276616c7581526332911d1160e11b6020820152602401612a6591614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a22546f74616c2057616c6b73222c2276616c8152643ab2911d1160d91b6020820152602501612aae91614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a22546f74616c204665656473222c2276616c8152643ab2911d1160d91b6020820152602501612af791614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a22546f74616c20547265617473222c227661815265363ab2911d1160d11b6020820152602601612b4191614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a22546f74616c20446f6e6174696f6e73222c815268113b30b63ab2911d1160b91b6020820152602901612b8e91614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a2241646f70746564222c2276616c7565223a8152601160f91b6020820152602101612bd391614dcf565b61227d60f01b8152600201615d7d60f01b81526002010390601f19918281018252612bfe9082610bc0565b612c0790614f2b565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d8201612c4191614dcf565b039081018252612c519082610bc0565b60405161089781928261082a565b612c67614d8e565b976128c0565b503461050d57600036600319011261050d576020601a54604051908152f35b9a9c9b9894612cd694612cf4999460408e6101609e9b96612ce59b9682526020820152015260608d015260808c015260a08b015260c08a01526101808060e08b0152890190610805565b90878203610100890152610805565b90858203610120870152610805565b946101408401521515910152565b503461050d57602036600319011261050d57600435600052601460205260406000208054610897600183015492600281015490600381015460048201546005830154600684015460405191612d5e836118bd8160078a01610aa1565b612d6a60088701610be1565b93612d7760098801610be1565b95612d8b600b600a8a015499015460ff1690565b986040519c8d9c8d612c8c565b503461050d576000602036600319011261091f576004358160018060a01b03612dc6816010541633146138df565b600b5416803b1561248657819060246040518094819363e47ad74d60e01b83528760048401525af18015612e6d575b612e36575b506040805133815260208101929092527f83f76efc0c025b2e3779f7bcead5a89ddaf05dc7829157cdab021a8591e7a6f991908190810161243c565b7f83f76efc0c025b2e3779f7bcead5a89ddaf05dc7829157cdab021a8591e7a6f99192612e6561243c92610b92565b929150612dfa565b612e7561370a565b612df5565b503461050d57604036600319011261050d57602060ff61162c600435612e9f81610953565b60243590612eac82610953565b60018060a01b03166000526005845260406000209060018060a01b0316600052602052604060002090565b503461050d57602036600319011261050d57600435612ef581610953565b612efd61311a565b6001600160a01b03908116908115612f4c57600a54826001600160601b0360a01b821617600a55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461050d57604036600319011261050d5760243563ffffffff811680910361050d57600435600052600e602052604060002090600052602052604060002060018060a01b0381541690610897600260405192611c1a84611c138160018501610aa1565b50602036600319011261050d577ff8d8affc4b5aa6fcef5154d041bf3d413d11797d4fa2429f49915f505863d31a6106e6600435613046601a54341015613dfa565b6130526105e982613235565b600080808061307961063f61063f610632600a6106208a6000526014602052604060002090565b819034156130bf575b3491f1156130b2575b60046130a1826000526014602052604060002090565b426001820155016106848154613942565b6130ba61370a565b61308b565b6108fc9150613082565b503461050d57602036600319011261050d576004356130e781610953565b6010546001600160a01b03919061310190831633146138df565b166001600160601b0360a01b600d541617600d55600080f35b600a546001600160a01b0316330361312e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b0316801561319257600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b156131f057565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b031661083b8115156131e9565b1561325f57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b6000818152600260205260409020546132ed906001600160a01b031615156131e9565b6000908152600460205260409020546001600160a01b031690565b1561330f57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60405190602082018281106001600160401b0382111761338e575b60405260008252565b613396610b37565b613385565b906133bf9392916133af610e638433613426565b6133ba8383836134f8565b613747565b156133c657565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b038061343884613235565b16928183169284841494851561346e575b50508315613458575b50505090565b613464919293506132ca565b1614388080613452565b60009081526005602090815260408083206001600160a01b03949094168352929052205460ff1693503880613449565b156134a557565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b61351c9061350584613235565b6001600160a01b038281169390918216841461349e565b831692831561360f5761358e8261353787846135e896615034565b61354d8561354761063f8a613235565b1461349e565b613574613564886000526004602052604060002090565b80546001600160a01b0319169055565b6001600160a01b0316600090815260036020526040902090565b80546000190190556001600160a01b0381166000908152600360205260409020600181540190556135c9856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b038061369984613235565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4565b9081602091031261050d575161083b816104fb565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261083b92910190610805565b506040513d6000823e3d90fd5b3d15613742573d9061372882611fee565b916137366040519384610bc0565b82523d6000602084013e565b606090565b92909190823b156138485761377a926020926000604051809681958294630a85bd0160e11b9a8b855233600486016136d9565b03926001600160a01b03165af160009181613818575b5061380a5761379d613717565b805190816138055760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61383a91925060203d8111613841575b6138328183610bc0565b8101906136c4565b9038613790565b503d613828565b50505050600190565b61385a81613172565b8210156138865760018060a01b0316600052600660205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b156138e657565b60405162461bcd60e51b815260206004820152601d60248201527f4d657373616765436c69656e743a206e6f7420617574686f72697a65640000006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b6001906000198114613952570190565b61395a61392b565b0190565b919081101561396f575b60051b0190565b6139776119d2565b613968565b3561ffff8116810361050d5790565b90601f811161399957505050565b600091825260208220906020601f850160051c830194106139d5575b601f0160051c01915b8281106139ca57505050565b8181556001016139be565b90925082906139b5565b9092916001600160401b038111613aa7575b613a05816139ff8454610a67565b8461398b565b6000601f8211600114613a3f5781929394600092613a34575b50508160011b916000199060031b1c1916179055565b013590503880613a1e565b601f19821694613a5484600052602060002090565b91805b878110613a8f575083600195969710613a75575b505050811b019055565b0135600019600384901b60f8161c19169055388080613a6b565b90926020600181928686013581550194019101613a57565b613aaf610b37565b6139f1565b9081602091031261050d575161083b81610953565b5190610bfc82611d92565b9081602091031261050d575161083b81611d92565b600b80546001600160a01b0319166001600160a01b03928316179055600b54613b1a906001600160a01b031661063f565b90613b6781604051809463647846a560e01b825281600460209788935afa908115613d83575b600091613d66575b501660018060a01b03166001600160601b0360a01b600c541617600c55565b600c54613b7c906001600160a01b031661063f565b82828216613cd6575b5050600b54613b9c906001600160a01b031661063f565b604051633fc8cef360e01b808252919083908581600481865afa908115613cc9575b600091613cac575b5016613bd25750505050565b8391613c2d916040519182528382600481845afa918215613c9f575b600092613c70575b5060405163095ea7b360e01b81526001600160a01b0390911660048201526000196024820152938492839160009183906044820190565b0393165af18015613c63575b613c45575b8080610ace565b81613c5b92903d1061238e5761237f8183610bc0565b503880613c3e565b613c6b61370a565b613c39565b613c91919250843d8611613c98575b613c898183610bc0565b810190613ab4565b9038613bf6565b503d613c7f565b613ca761370a565b613bee565b613cc39150863d8811613c9857613c898183610bc0565b38613bc6565b613cd161370a565b613bbe565b600b54600092613d2691613cf2906001600160a01b031661063f565b60405163095ea7b360e01b81526001600160a01b039091166004820152600019602482015293849283919082906044820190565b03925af18015613d59575b613d3c575b82613b85565b613d5290833d851161238e5761237f8183610bc0565b5038613d36565b613d6161370a565b613d31565b613d7d9150853d8711613c9857613c898183610bc0565b38613b48565b613d8b61370a565b613b40565b15613d9757565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b6000918252600f6020526040909120546001600160a01b03918216911614613df557600090565b600190565b15613e0157565b60405162461bcd60e51b815260206004820152601d60248201527f41646f7074415065743a20496e73756666696369656e742066756e64730000006044820152606490fd5b15613e4d57565b60405162461bcd60e51b815260206004820152602d60248201527f41646f7074415065743a2063616c6c6572206973206e6f7420746865206f776e60448201526c195c881bd9881d1a19481b999d609a1b6064820152608490fd5b9060028201809211613eb657565b610bfc61392b565b9060208201809211613eb657565b91908201809211613eb657565b15613ee057565b60405162461bcd60e51b815260206004820152601d60248201527f41646f7074415065743a2050657420646f6573206e6f742065786973740000006044820152606490fd5b15613f2c57565b60405162461bcd60e51b815260206004820152602160248201527f41646f7074415065743a2050657420697320616c72656164792061646f7074656044820152601960fa1b6064820152608490fd5b6201517f19810191908211613eb657565b6203f47f19810191908211613eb657565b6206977f19810191908211613eb657565b62093a7f19810191908211613eb657565b90610bfc614059600b613fd0611fe1565b948054865260018101546020870152600281015460408701526003810154606087015260048101546080870152600581015460a0870152600681015460c087015261401d60078201610be1565b60e087015261402e60088201610be1565b61010087015261404060098201610be1565b610120870152600a810154610140870152015460ff1690565b1515610160840152565b1561406a57565b60405162461bcd60e51b815260206004820152602560248201527f41646f7074415065743a20416c72656164792061646f7074656420627920736f6044820152646d656f6e6560d81b6064820152608490fd5b93919290926140ca61311a565b60125493600094855260209460158652604081209560408220928051926001600160401b038411614263575b61410a846141048754610a67565b8761398b565b82601f85116001146141de575094600497948461415d956141869c9b9995614154956141669a926141d3575b50508160011b916000199060031b1c19161790555b60018701614270565b60028501614270565b60038301614270565b0180546001600160a01b0319166001600160a01b03909216919091179055565b614191601254614344565b610bfc6141ce6012547f1ce4fd75358b7e2473b65d37352ef8fcc2630c7d157693ec1412f117fd52a3246040518061218c84829190602083019252565b601255565b015190503880614136565b601f93929193198516906141f787600052602060002090565b94905b82821061424b575050946001856141869c9b9995614154956141669a9561415d9960049e9b10614232575b505050811b01905561414b565b015160001960f88460031b161c19169055388080614225565b806001869782949787015181550196019401906141fa565b61426b610b37565b6140f6565b91909182516001600160401b038111614337575b614292816139ff8454610a67565b602080601f83116001146142cd5750819293946000926142c25750508160011b916000199060031b1c1916179055565b015190503880613a1e565b90601f198316956142e385600052602060002090565b926000905b88821061431f5750508360019596971061430657505050811b019055565b015160001960f88460031b161c19169055388080613a6b565b806001859682949686015181550195019301906142e8565b61433f610b37565b614284565b601854600160401b81101561439b575b600181018060185581101561438e575b60186000527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0155565b6143966119d2565b614364565b6143a3610b37565b614354565b601954600160401b8110156143ff575b60018101806019558110156143f2575b60196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950155565b6143fa6119d2565b6143c8565b614407610b37565b6143b8565b1561441357565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b6001600160a01b038116908115614524576000838152600260205260409020546144fc9190614493906001600160a01b031615155b1561440c565b61449c846150d1565b6144a68482615099565b6000848152600260205260409020546144c9906001600160a01b0316151561448d565b6001600160a01b0381166000908152600360205260409020600181540190556135c9846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b9a9794919261459f8c6101609c99969f9e9b98956145916145ad95610180808552840190610aa1565b916020818403910152610aa1565b8c810360408e015290610aa1565b9b60608b015260808a015260a089015260c088015260e08701526101008601526101208501526101408401521515910152565b61083b939260609260018060a01b0316825260208201528160408201520190610805565b90916147dd7f25435a669953bbd4d68b1f0625d13ef5bdd4f7bd9370d48ecfa5eab0fe2d9de8936146376105e984613235565b6147b36147a16147ad6007614656876000526014602052604060002090565b01602061477360096146728a6000526014602052604060002090565b0189600861468a826000526014602052604060002090565b01600a6146a1836000526014602052604060002090565b01546146b7836000526014602052604060002090565b5460016146ce856000526014602052604060002090565b015460026146e6866000526014602052604060002090565b01549060066146ff876000526014602052604060002090565b0154926003614718886000526014602052604060002090565b0154946004614731896000526014602052604060002090565b015496614765600b6128a960056147528d6000526014602052604060002090565b01549b6000526014602052604060002090565b996040519d8e9d8e01614568565b0390614787601f1992838101835282610bc0565b614790886147e2565b6040519384918988602085016145e0565b03908101835282610bc0565b8561498f565b506040805193845260208401949094526001600160a01b0316928201929092529081906060820190565b0390a1565b60006147ed82613235565b6001600160a01b0390838183161584146148a25761480b91506150d1565b6148148361520c565b61481d83613235565b614831846000526004602052604060002090565b80546001600160a01b03199081169091556001600160a01b038216600090815260036020526040902084198154019055614875856000526002602052604060002090565b908154169055167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a4565b6148ab91615145565b61480b565b90604051608081018181106001600160401b03821117614912575b604052606060ff6002839560018060a01b0381541685526040516148f681610c358160018601610aa1565b6020860152015461ffff8116604085015260101c161515910152565b61491a610b37565b6148cb565b909161493661083b93604084526040840190610805565b916020818403910152610805565b9081602091031261050d575190565b9061498460009460809461ffff9398979860018060a01b03168552602085015260a0604085015260a0840190610805565b951660608201520152565b906020906149af6149aa84600052600f602052604060002090565b6148b0565b926149bd6060850151151590565b614a66575b600b546149d7906001600160a01b031661063f565b9060006149f960406149ef885160018060a01b031690565b97015161ffff1690565b95614a1a60405197889687958694633f6b724360e21b865260048601614953565b03925af1908115614a59575b600091614a31575090565b61083b915060203d8111614a52575b614a4a8183610bc0565b810190614944565b503d614a40565b614a6161370a565b614a26565b90614a8e8385015191614a8060405193849287840161491f565b03601f198101835282610bc0565b906149c2565b90614b67614ae2614b4e94610bfc96614ada614af69560018060a01b0397614ac189600b541633146138df565b600052600f6020528780604060002054169116146138df565b810190614b6d565b602080829894969398518301019101614be9565b999798969b9a95614b0c95919495939293611fe1565b9c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e08701526101008601526101208501526101408401521515610160830152565b614b62856000526014602052604060002090565b614c84565b16614458565b9160608383031261050d578235614b8381610953565b9260208101359260408201356001600160401b03811161050d5761083b9201612018565b81601f8201121561050d578051614bbd81611fee565b92614bcb6040519485610bc0565b8184526020828401011161050d5761083b91602080850191016107e2565b6101808183031261050d578051926001600160401b039384811161050d5783614c13918401614ba7565b93602083015181811161050d5784614c2c918501614ba7565b93604084015191821161050d57614c44918401614ba7565b9160608101519160808201519160a08101519160c08201519160e081015191610100820151916101208101519161083b6101606101408401519301613ac9565b600b614d17610160610bfc94805185556020810151600186015560408101516002860155606081015160038601556080810151600486015560a0810151600586015560c08101516006860155614ce160e082015160078701614270565b614cf361010082015160088701614270565b614d0561012082015160098701614270565b610140810151600a8601550151151590565b91019060ff801983541691151516179055565b15614d3157565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608490fd5b60405190614d9b82610ba5565b600582526466616c736560d81b6020830152565b60405190614dbc82610ba5565b60048252637472756560e01b6020830152565b9061395a602092828151948592016107e2565b600092918154614df181610a67565b92600191808316908115614e495750600114614e0d5750505050565b90919293945060005260209081600020906000915b858310614e385750505050019038808080610ace565b805485840152918301918101614e22565b60ff1916845250505081151590910201915038808080610ace565b60405190606082018281106001600160401b03821117614ed4575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b614edc610b37565b614e7f565b600281901b91906001600160fe1b03811603613eb657565b90614f0382611fee565b614f106040519182610bc0565b8281528092614f21601f1991611fee565b0190602036910137565b80511561500b57614f3a614e64565b614f56614f51614f4a8451613ea8565b6003900490565b614ee1565b91614f68614f6384613ebe565b614ef9565b92835280815182019060208501935b828210614fb957505050600390510680600114614fa857600214614f99575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190614f77565b5061083b61336a565b6020906001600160401b03811161502c5760051b0190565b613977610b37565b9091906001600160a01b0380821691826150775750615052836150d1565b831680615065575050610bfc915061520c565b0361506e575050565b610bfc91615099565b838286168403615089575b5050615052565b61509291615145565b3883615082565b6040906150a581613172565b9260009160018060a01b0316825260066020528282208483526020528083832055815260076020522055565b60085481600052600960205280604060002055600160401b811015615138575b600181018060085581101561512b575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6151336119d2565b615101565b615140610b37565b6150f1565b906151aa61518f9261515681613172565b6000198101939084116151ff575b6000948186928352600760205260408320548681036151b7575b506000526007602052604060002090565b556001600160a01b0316600090815260066020526040902090565b9082526020526040812055565b6001600160a01b0385168085526006602081815260408088208b895282528088205460009485529282528084208589528252808820839055918352600790529020553861517e565b61520761392b565b615164565b600880546000199290838101818111615315575b6152bc60009384928184526009602052846040852054911015615308575b8684526152ab7ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee29586810154908310156152fb575b88865280837ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301556000526009602052604060002090565b556000526009602052604060002090565b5582549384156152e757840193808510156152da575b838352015555565b6152e26119d2565b6152d2565b634e487b7160e01b83526031600452602483fd5b6153036119d2565b615273565b6153106119d2565b61523e565b61531d61392b565b615220565b90602091805182101561533457010190565b61533c6119d2565b010190565b80156153dd576000818181805b6153c5575061535c81614ef9565b935b6153685750505090565b60001981019081116153b8575b8091600a916153a2603084840681018091116153ab575b60f81b6001600160f81b031916861a9187615322565b5304908161535e565b6153b361392b565b61538c565b6153c061392b565b615375565b91506153d2600a91613942565b91048084929161534e565b506040516153ea81610ba5565b60018152600360fc1b60208201529056fea2646970667358221220c7f4bf5be1cb9aa92b6c316038e5bbf11d67362a0cc88ecbbab27e3d27900f5664736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361015610018575b361561001657005b005b60003560e01c806301ffc9a7146104f257806302b3b368146104e95780630581f59d146104e057806306fdde03146104d7578063081812fc146104ce578063095ea7b3146104c55780630d029802146104bc5780630d80fefd146103c057806318160ddd146104b357806319b81577146104aa57806320bfe3421461049857806323b872dd146104a15780632972b0f0146104985780632ee02d7c1461048f5780632f745c59146104865780632f820a5f1461047d57806342842e0e14610474578063438b63001461046b5780634f139b49146104625780634f154c54146104595780634f6ccce714610450578063559b2f6514610447578063585c7edd1461043e57806359d55194146104355780635b77a6a61461042c5780635f46e740146104235780636352211e1461041a5780636ac053ad146104115780637044cd7e1461040857806370a08231146103ff578063715018a6146103f657806373717b08146103ed578063788063f0146103e4578063794b4643146103db5780637a29fa66146103d25780637b84044d146103c9578063823a1db1146103c0578063853c75d8146103b75780638da5cb5b146103ae57806392ae12fd146103a557806393f1da4f1461039c57806395d89b41146103935780639877f2f31461038a578063a22cb46514610381578063a2db916914610378578063a6bc4d671461036f578063a771ac1514610366578063b29a81401461035d578063b479a96114610354578063b7f494a41461034b578063b88d4fde14610342578063bb0b983014610339578063bd3d9a2114610330578063c60853f614610327578063c87b56dd1461031e578063c96fba4014610315578063cfb869bf1461030c578063e47ad74d14610303578063e985e9c5146102fa578063f2fde38b146102f1578063f52a9198146102e8578063f59dfdfb146102df5763f71941380361000e576102da6130c9565b61000e565b506102da613004565b506102da612fa0565b506102da612ed7565b506102da612e7a565b506102da612d98565b506102da612d02565b506102da612c6d565b506102da612762565b506102da612685565b506102da612650565b506102da612626565b506102da6125cf565b506102da61248a565b506102da6123a2565b506102da612289565b506102da6121f8565b506102da61205f565b506102da611f06565b506102da611d9c565b506102da611cfa565b506102da611c54565b506102da611c35565b506102da611bcc565b506102da611b6b565b506102da611b41565b506102da610bfe565b506102da611aac565b506102da611a5a565b506102da611a3b565b506102da6119e9565b506102da6119a8565b506102da611949565b506102da611921565b506102da611885565b506102da6116c7565b506102da6116a8565b506102da611638565b506102da6115e1565b506102da611552565b506102da61141e565b506102da611391565b506102da6112e5565b506102da61125d565b506102da611210565b506102da61116a565b506102da6110e8565b506102da611044565b506102da611010565b506102da610f0e565b506102da610de1565b506102da610e43565b506102da610c6f565b506102da610c50565b506102da610a3d565b506102da610964565b506102da610922565b506102da61083e565b506102da610702565b506102da61059b565b506102da610512565b6001600160e01b031981160361050d57565b600080fd5b503461050d57602036600319011261050d576020600435610532816104fb565b63ffffffff60e01b1663780e9d6360e01b8114908115610558575b506040519015158152f35b6380ac58cd60e01b81149150811561058a575b8115610579575b503861054d565b6301ffc9a760e01b14905038610572565b635b5e139f60e01b8114915061056b565b50602036600319011261050d577f270b33e55d2417c1b1aef69f10fe745f3b7c907307cd45c038ef7f5490d655326106e66004356105dd601a54341015613dfa565b6105f96105e982613235565b6001600160a01b03163314613e46565b600080808061064b61063f61063f610632600a6106208a6000526014602052604060002090565b01546000526017602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b819034156106f8575b3491f1156106eb575b6005610673826000526014602052604060002090565b426002820155016106848154613942565b9055600661069c826000526014602052604060002090565b016106a8348254613ecc565b90556040518181527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790602090a16040519081529081906020820190565b0390a1005b6106f361370a565b61065d565b6108fc9150610654565b50602036600319011261050d577f01907761d11c22471f309f9f408da0f1f10120847e63448528be36911ab6bca16106e6600435610744601a54341015613dfa565b6107506105e982613235565b600080808061077761063f61063f610632600a6106208a6000526014602052604060002090565b819034156107cd575b3491f1156107c0575b4261079e826000526014602052604060002090565b5560036107b5826000526014602052604060002090565b016106848154613942565b6107c861370a565b610789565b6108fc9150610780565b600091031261050d57565b60005b8381106107f55750506000910152565b81810151838201526020016107e5565b9060209161081e815180928185528580860191016107e2565b601f01601f1916010190565b90602061083b928181520190610805565b90565b503461050d5760008060031936011261091f576040519080805461086181610a67565b808552916001918083169081156108f5575060011461089b575b6108978561088b81870382610bc0565b6040519182918261082a565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106108dd57505050810160200161088b8261089761087b565b805460208587018101919091529093019281016108c2565b8695506108979693506020925061088b94915060ff191682840152151560051b820101929361087b565b80fd5b503461050d57602036600319011261050d5760206109416004356132ca565b6040516001600160a01b039091168152f35b6001600160a01b0381160361050d57565b503461050d57604036600319011261050d5760043561098281610953565b60243561098e81613235565b916001600160a01b0380841690821681146109ee57610016936109bb9133149081156109c0575b50613258565b613660565b6001600160a01b0316600090815260056020908152604080832033845290915290205460ff169050386109b5565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461050d57600036600319011261050d57600b546040516001600160a01b039091168152602090f35b90600182811c92168015610a97575b6020831014610a8157565b634e487b7160e01b600052602260045260246000fd5b91607f1691610a76565b9060009291805491610ab283610a67565b918282526001938481169081600014610b145750600114610ad4575b50505050565b90919394506000526020928360002092846000945b838610610b00575050505001019038808080610ace565b805485870183015294019385908201610ae9565b9294505050602093945060ff191683830152151560051b01019038808080610ace565b50634e487b7160e01b600052604160045260246000fd5b61018081019081106001600160401b03821117610b6a57604052565b610b72610b37565b604052565b60a081019081106001600160401b03821117610b6a57604052565b6001600160401b038111610b6a57604052565b604081019081106001600160401b03821117610b6a57604052565b90601f801991011681019081106001600160401b03821117610b6a57604052565b90610bfc610bf59260405193848092610aa1565b0383610bc0565b565b503461050d57602036600319011261050d576004356000526013602052610897610c35610c3c604060002060405192838092610aa1565b0382610bc0565b604051918291602083526020830190610805565b503461050d57600036600319011261050d576020600854604051908152f35b50602036600319011261050d576004356000818152600260205260409020547f87b11a36a7d8951907601f47f6fa4a32bffadebbff2e4894922b25922d340d85916106e691610cc8906001600160a01b03161515613ed9565b610cd6601a54341015613dfa565b610cf2610ce282613235565b6001600160a01b03163014614063565b6000808080610d1961063f61063f610632600a6106208a6000526014602052604060002090565b81903415610dd7575b3491f115610dca575b610d3442613f7b565b610d48826000526014602052604060002090565b55610d5242613f8c565b6001610d68836000526014602052604060002090565b0155610d7342613f9d565b6002610d89836000526014602052604060002090565b01556006610da1826000526014602052604060002090565b01610dad348254613ecc565b9055610dba8133306134f8565b6040519081529081906020820190565b610dd261370a565b610d2b565b6108fc9150610d22565b503461050d57604036600319011261050d576020610e0d600435610e0481610953565b60243590613dce565b6040519015158152f35b606090600319011261050d57600435610e2f81610953565b90602435610e3c81610953565b9060443590565b503461050d57610016610e5536610e17565b91610e68610e638433613426565b613308565b6134f8565b9181601f8401121561050d578235916001600160401b03831161050d576020808501948460051b01011161050d57565b608060031982011261050d57600435610eb581610953565b916001600160401b0360243581811161050d5783610ed591600401610e6d565b9390939260443583811161050d5782610ef091600401610e6d565b9390939260643591821161050d57610f0a91600401610e6d565b9091565b503461050d57610f1d36610e9d565b610f3960018060a0989794989695961b036010541633146138df565b60005b828110610f4c5761001688613ae9565b80611006610fb0888888610ff1868a8f610f6d61100b9b8d610f729361395e565b61397c565b95610f7e83838361395e565b35600052610fb0610fb584600f986020988a8a5260029c8d9c60409d8e600020019061ffff1661ffff19825416179055565b61395e565b35610fbf81610953565b610fca85858561395e565b35600052878752886000209060018060a01b03166001600160601b0360a01b825416179055565b35600052526000200162ff0000198154169055565b613942565b610f3c565b503461050d57604036600319011261050d57602061103c60043561103381610953565b60243590613851565b604051908152f35b503461050d57606036600319011261050d5760243560043561106582610953565b6000818152600f60205260409020546001600160a01b03161561108f576100169160443591614604565b60405162461bcd60e51b815260206004820152602b60248201527f4d657373616765436c69656e743a2064657374696e6174696f6e20636861696e60448201526a206e6f742061637469766560a81b6064820152608490fd5b503461050d576100166110fa36610e17565b9060405192602084018481106001600160401b03821117611122575b6040526000845261339b565b61112a610b37565b611116565b6020908160408183019282815285518094520193019160005b828110611156575050505090565b835185529381019392810192600101611148565b503461050d5760208060031936011261050d576004359061118a82610953565b61119382613172565b9061119d82615014565b926111ab6040519485610bc0565b828452601f196111ba84615014565b01368386013760005b8381106111d85760405180610897878261112f565b806111e66111fe9284613851565b8651821015611203575b848260051b88010152613942565b6111c3565b61120b6119d2565b6111f0565b503461050d57602036600319011261050d577fc01bd9c884731622f1af5796e1e37246a27b50e2999f80f11e30e9ed2e3a1868602060043561125061311a565b80601a55604051908152a1005b503461050d57600036600319011261050d57604051806019549182815260208091019260196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695916000905b8282106112ce57610897856112c281890382610bc0565b6040519182918261112f565b8354865294850194600193840193909101906112ab565b503461050d57602036600319011261050d576004356008548110156113375760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b503461050d57602036600319011261050d577fe1a25f463c6504824e91268b5b2c05658d5358c9c1698a85346cfae5336a642e6106e66004356113d381610953565b6010546001600160a01b036113eb33828416146138df565b6001600160a01b031990911690821617601055604080513381526001600160a01b03909216602083015290918291820190565b503461050d57600036600319011261050d57604051806018549182815260208091019260186000527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e916000905b82821061148357610897856112c281890382610bc0565b83548652948501946001938401939091019061146c565b61083b906020815282516020820152602083015160408201526040830151606082015260608301516080820152608083015160a082015260a083015160c082015260c083015160e082015260e0830151926101809061153b6115096101009684888701526101a0860190610805565b95820151611526601f199761012092898883030184890152610805565b90830151610140978683030188870152610805565b948101516101608481019190915201511515910152565b503461050d57602036600319011261050d576108976115d56040610160815161157a81610b4e565b600091818380935282602082015282858201528260608201528260808201528260a08201528260c0820152606060e0820152606061010082015260606101208201528261014082015201526004358152601460205220613fbf565b6040519182918261149a565b503461050d57604036600319011261050d57602060ff61162c60243561160681610953565b6004356000526016845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b503461050d5760c036600319011261050d5760443561165681610953565b611661606435610953565b60a435906001600160401b039081831161050d573660238401121561050d57826004013591821161050d57366024838501011161050d576024610016930190602435614a94565b503461050d57602036600319011261050d576020610941600435613235565b50602036600319011261050d576004356116e5601a54341015613dfa565b600081815260026020526040902054611708906001600160a01b03161515613ed9565b61171c816000526014602052604060002090565b61173361172d600b83015460ff1690565b15613f25565b600181015461174142613fae565b11908115611813575b81156117fd575b5015611790576106e681610dba816117897f6e8cd1f70db1aa72284733203457cea2522ddaeb381b13f68877ae170f8147ca95613235565b33906134f8565b6040805162461bcd60e51b81526020600482015260248101919091527f41646f7074415065743a20506574206973206265696e672074616b656e20636160448201527f7265206f662e2043616e6e6f742072657475726e20746f207368656c7465722e6064820152608490fd5b60029150015461180c42613fae565b1138611751565b8091505461182042613fae565b119061174a565b93906080936118596118759461184b611867949a999a60a08a5260a08a0190610805565b9088820360208a0152610805565b908682036040880152610805565b908482036060860152610805565b6001600160a01b03909416910152565b503461050d57602036600319011261050d576004356000526015602052604080600020906108978151916118c4836118bd8187610aa1565b0384610bc0565b8051936118df856118d88160018501610aa1565b0386610bc0565b81516118f281610c358160028601610aa1565b825191611906836118bd8160038501610aa1565b6004015492519586956001600160a01b039094169386611827565b503461050d57602036600319011261050d57602061103c60043561194481610953565b613172565b503461050d5760008060031936011261091f5761196461311a565b600a80546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461050d57600036600319011261050d57600c546040516001600160a01b039091168152602090f35b50634e487b7160e01b600052603260045260246000fd5b503461050d57602036600319011261050d5760043560195481101561050d5760209060196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950154604051908152f35b503461050d57600036600319011261050d576020601254604051908152f35b503461050d57602036600319011261050d5760043560185481101561050d5760209060186000527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0154604051908152f35b503461050d57604036600319011261050d577fd8b7d7a23c5842ffa9123c6ca5422f27d20e7eb242f4afb8f45f871e5b9537c9602435600435611aee82610953565b611af661311a565b60008181526016602090815260408083206001600160a01b03861684529091529020805460ff19169055604080519182526001600160a01b03909216602082015290819081016106e6565b503461050d57600036600319011261050d576010546040516001600160a01b039091168152602090f35b503461050d57600036600319011261050d57600a546040516001600160a01b039091168152602090f35b92949390611bbe60609361ffff9260018060a01b03168652608060208701526080860190610805565b951660408401521515910152565b503461050d57602036600319011261050d57600435600052600f602052604060002060018060a01b0381541690610897600260405192611c1a84611c138160018501610aa1565b0385610bc0565b015460405193849361ffff60ff8460101c1693169185611b95565b503461050d57600036600319011261050d576020601154604051908152f35b503461050d5760008060031936011261091f5760405190806001805491611c7a83610a67565b808652928281169081156108f55750600114611ca0576108978561088b81870382610bc0565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410611ce257505050810160200161088b8261089761087b565b80546020858701810191909152909301928101611cc7565b503461050d57604036600319011261050d577fecf4bb70ae42517181404f9ef6d941228f6c18e8d51f9bf514419aa6631d304a602435600435611d3c82610953565b611d4461311a565b60008181526016602090815260408083206001600160a01b03861684529091529020805460ff19166001179055604080519182526001600160a01b03909216602082015290819081016106e6565b8015150361050d57565b503461050d57604036600319011261050d57600435611dba81610953565b602435611dc681611d92565b6001600160a01b03821691338314611e485781611e05611e169233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b6020815260a0611ef3611eab845183602086015260c0850190610805565b611ede611eca602087015192601f199384888303016040890152610805565b604087015183878303016060880152610805565b90606086015190858303016080860152610805565b926080600180841b039101511691015290565b503461050d57602036600319011261050d576108976040805190611f2982610b77565b600060806060938481528460208201528484820152848082015201526004356000526015602052611fd7611fc7600483600020845195611f6887610b77565b8551611f7881610c358186610aa1565b87528551611f8d81610c358160018701610aa1565b60208801528551611fa581610c358160028701610aa1565b86880152611fb560038301610be1565b9087015201546001600160a01b031690565b6001600160a01b03166080840152565b5191829182611e8d565b60405190610bfc82610b4e565b6020906001600160401b03811161200b575b601f01601f19160190565b612013610b37565b612000565b81601f8201121561050d5780359061202f82611fee565b9261203d6040519485610bc0565b8284526020838301011161050d57816000926020809301838601378301015290565b503461050d57608036600319011261050d576004356001600160401b0360243581811161050d57612094903690600401612018565b60443582811161050d576120ac903690600401612018565b9160643590811161050d576120c5903690600401612018565b9083600052601660205260ff6120f060406000203360018060a01b0316600052602052604060002090565b541615612199576121449361213960099361210d60115430614458565b6121306121266011546000526014602052604060002090565b9460078601614270565b60088401614270565b600a82015501614270565b61214f6011546143a8565b6100166121946011547ff825db3e178c42c2ac2b80d9c8c675cb849fbaff1f0975fa5379016980f41b1f6040518061218c84829190602083019252565b0390a1613942565b601155565b60405162461bcd60e51b815260206004820152603160248201527f41646f7074415065743a2063616c6c6572206973206e6f742061206d616e616760448201527032b91037b3103a34329039b432b63a32b960791b6064820152608490fd5b503461050d5760a036600319011261050d5760043561221681610953565b6001600160401b039060243582811161050d57612237903690600401612018565b60443583811161050d5761224f903690600401612018565b60643584811161050d57612267903690600401612018565b9160843594851161050d57612283610016953690600401612018565b936140bd565b503461050d57604036600319011261050d577f16a1412f01b73c390eb2548427101644aa86c1443c272f73df00fb74c48fe4996004356122c881610953565b6024359060018060a01b036122e2816010541633146138df565b81168061232b5750612304600080808086335af16122fe613717565b50613d90565b604080513381526001600160a01b03909216602083015281019190915280606081016106e6565b60405163a9059cbb60e01b81523360048201526024810184905290602090829060449082906000905af18015612395575b612367575b50612304565b6123879060203d811161238e575b61237f8183610bc0565b810190613ad4565b5038612361565b503d612375565b61239d61370a565b61235c565b503461050d576000602036600319011261091f576004358160018060a01b036123d0816010541633146138df565b600b5416803b1561248657819060246040518094819363b479a96160e01b83528760048401525af18015612479575b612442575b506040805133815260208101929092527f7b6bdf5a54b984bdb41e777eb126123085d57633ab56d408d9a1d39dd894e7bb9190819081015b0390a180f35b7f7b6bdf5a54b984bdb41e777eb126123085d57633ab56d408d9a1d39dd894e7bb919261247161243c92610b92565b929150612404565b61248161370a565b6123ff565b5080fd5b503461050d5761249936610e9d565b6124b460018060a09998969497991b036010541633146138df565b60005b8781106124c75761001687613ae9565b6124d5610f6d82848961395e565b906124e1818a8861395e565b356000526020600f8152612509600293846040600020019061ffff1661ffff19825416179055565b858210156125c2575b8160051b850135601e198636030181121561050d578501908135916001600160401b03831161050d570192813603841361050d57612579612599926125bd9560016125738f88612562918f61395e565b35600052600f602052604060002090565b016139df565b612587612562848d8b61395e565b01805462ff0000191662010000179055565b6110066125aa612562838c8a61395e565b80546001600160a01b0319166001179055565b6124b7565b6125ca6119d2565b612512565b503461050d57608036600319011261050d576004356125ed81610953565b6024356125f981610953565b606435916001600160401b03831161050d5761261c610016933690600401612018565b916044359161339b565b503461050d57600036600319011261050d57600d546040516001600160a01b039091168152602090f35b503461050d57602036600319011261050d576004356000526017602052602060018060a01b0360406000205416604051908152f35b503461050d57602036600319011261050d576004356126a381610953565b6010546001600160a01b03906126bc90821633146138df565b80600b541691823b1561050d576000807f3785abad972484d82ebc033d8eb190737cd209b24e7f853dd622e415c3f537a29460246106e695604051948593849263630429fb60e11b8452881660048401525af18015612755575b61273c575b50604080513381526001600160a01b03909216602083015290918291820190565b8061274961274f92610b92565b806107d7565b3861271b565b61275d61370a565b612716565b503461050d57602036600319011261050d5760043560008181526002602052604090205461279a906001600160a01b03161515614d2a565b6127a381615341565b60096127b9836000526014602052604060002090565b019160076127d1826000526014602052604060002090565b01906127f06127ea826000526014602052604060002090565b54615341565b6128106001612809846000526014602052604060002090565b0154615341565b6128296002612809856000526014602052604060002090565b6128426003612809866000526014602052604060002090565b9061285c6004612809876000526014602052604060002090565b926128766005612809886000526014602052604060002090565b946128b1600b6128a961289860066128098c6000526014602052604060002090565b996000526014602052604060002090565b015460ff1690565b15612c5f576128be614daf565b975b604051757b226e616d65223a2241646f7074204120506574202360501b60208201529a8b9a60368c016128f291614dcf565b61088b60f21b81526002017f226465736372697074696f6e223a2241646f7074204120506574204e4654222c8152602001681134b6b0b3b2911d1160b91b815260090161293e91614de2565b61088b60f21b81526002016d2261747472696275746573223a5b60901b8152600e017f7b2274726169745f74797065223a224e616d65222c2276616c7565223a2200008152601e0161298f91614de2565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a224c6173742057616c6b222c2276616c7565815262111d1160e91b60208201526023016129d691614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a224c6173742046656564222c2276616c7565815262111d1160e91b6020820152602301612a1d91614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a224c617374205472656174222c2276616c7581526332911d1160e11b6020820152602401612a6591614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a22546f74616c2057616c6b73222c2276616c8152643ab2911d1160d91b6020820152602501612aae91614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a22546f74616c204665656473222c2276616c8152643ab2911d1160d91b6020820152602501612af791614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a22546f74616c20547265617473222c227661815265363ab2911d1160d11b6020820152602601612b4191614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a22546f74616c20446f6e6174696f6e73222c815268113b30b63ab2911d1160b91b6020820152602901612b8e91614dcf565b62089f4b60ea1b81526003017f7b2274726169745f74797065223a2241646f70746564222c2276616c7565223a8152601160f91b6020820152602101612bd391614dcf565b61227d60f01b8152600201615d7d60f01b81526002010390601f19918281018252612bfe9082610bc0565b612c0790614f2b565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015291908290603d8201612c4191614dcf565b039081018252612c519082610bc0565b60405161089781928261082a565b612c67614d8e565b976128c0565b503461050d57600036600319011261050d576020601a54604051908152f35b9a9c9b9894612cd694612cf4999460408e6101609e9b96612ce59b9682526020820152015260608d015260808c015260a08b015260c08a01526101808060e08b0152890190610805565b90878203610100890152610805565b90858203610120870152610805565b946101408401521515910152565b503461050d57602036600319011261050d57600435600052601460205260406000208054610897600183015492600281015490600381015460048201546005830154600684015460405191612d5e836118bd8160078a01610aa1565b612d6a60088701610be1565b93612d7760098801610be1565b95612d8b600b600a8a015499015460ff1690565b986040519c8d9c8d612c8c565b503461050d576000602036600319011261091f576004358160018060a01b03612dc6816010541633146138df565b600b5416803b1561248657819060246040518094819363e47ad74d60e01b83528760048401525af18015612e6d575b612e36575b506040805133815260208101929092527f83f76efc0c025b2e3779f7bcead5a89ddaf05dc7829157cdab021a8591e7a6f991908190810161243c565b7f83f76efc0c025b2e3779f7bcead5a89ddaf05dc7829157cdab021a8591e7a6f99192612e6561243c92610b92565b929150612dfa565b612e7561370a565b612df5565b503461050d57604036600319011261050d57602060ff61162c600435612e9f81610953565b60243590612eac82610953565b60018060a01b03166000526005845260406000209060018060a01b0316600052602052604060002090565b503461050d57602036600319011261050d57600435612ef581610953565b612efd61311a565b6001600160a01b03908116908115612f4c57600a54826001600160601b0360a01b821617600a55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461050d57604036600319011261050d5760243563ffffffff811680910361050d57600435600052600e602052604060002090600052602052604060002060018060a01b0381541690610897600260405192611c1a84611c138160018501610aa1565b50602036600319011261050d577ff8d8affc4b5aa6fcef5154d041bf3d413d11797d4fa2429f49915f505863d31a6106e6600435613046601a54341015613dfa565b6130526105e982613235565b600080808061307961063f61063f610632600a6106208a6000526014602052604060002090565b819034156130bf575b3491f1156130b2575b60046130a1826000526014602052604060002090565b426001820155016106848154613942565b6130ba61370a565b61308b565b6108fc9150613082565b503461050d57602036600319011261050d576004356130e781610953565b6010546001600160a01b03919061310190831633146138df565b166001600160601b0360a01b600d541617600d55600080f35b600a546001600160a01b0316330361312e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b0316801561319257600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b156131f057565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b031661083b8115156131e9565b1561325f57565b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b6000818152600260205260409020546132ed906001600160a01b031615156131e9565b6000908152600460205260409020546001600160a01b031690565b1561330f57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60405190602082018281106001600160401b0382111761338e575b60405260008252565b613396610b37565b613385565b906133bf9392916133af610e638433613426565b6133ba8383836134f8565b613747565b156133c657565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b6001600160a01b038061343884613235565b16928183169284841494851561346e575b50508315613458575b50505090565b613464919293506132ca565b1614388080613452565b60009081526005602090815260408083206001600160a01b03949094168352929052205460ff1693503880613449565b156134a557565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b61351c9061350584613235565b6001600160a01b038281169390918216841461349e565b831692831561360f5761358e8261353787846135e896615034565b61354d8561354761063f8a613235565b1461349e565b613574613564886000526004602052604060002090565b80546001600160a01b0319169055565b6001600160a01b0316600090815260036020526040902090565b80546000190190556001600160a01b0381166000908152600360205260409020600181540190556135c9856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b038061369984613235565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4565b9081602091031261050d575161083b816104fb565b6001600160a01b03918216815291166020820152604081019190915260806060820181905261083b92910190610805565b506040513d6000823e3d90fd5b3d15613742573d9061372882611fee565b916137366040519384610bc0565b82523d6000602084013e565b606090565b92909190823b156138485761377a926020926000604051809681958294630a85bd0160e11b9a8b855233600486016136d9565b03926001600160a01b03165af160009181613818575b5061380a5761379d613717565b805190816138055760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608490fd5b602001fd5b6001600160e01b0319161490565b61383a91925060203d8111613841575b6138328183610bc0565b8101906136c4565b9038613790565b503d613828565b50505050600190565b61385a81613172565b8210156138865760018060a01b0316600052600660205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b156138e657565b60405162461bcd60e51b815260206004820152601d60248201527f4d657373616765436c69656e743a206e6f7420617574686f72697a65640000006044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b6001906000198114613952570190565b61395a61392b565b0190565b919081101561396f575b60051b0190565b6139776119d2565b613968565b3561ffff8116810361050d5790565b90601f811161399957505050565b600091825260208220906020601f850160051c830194106139d5575b601f0160051c01915b8281106139ca57505050565b8181556001016139be565b90925082906139b5565b9092916001600160401b038111613aa7575b613a05816139ff8454610a67565b8461398b565b6000601f8211600114613a3f5781929394600092613a34575b50508160011b916000199060031b1c1916179055565b013590503880613a1e565b601f19821694613a5484600052602060002090565b91805b878110613a8f575083600195969710613a75575b505050811b019055565b0135600019600384901b60f8161c19169055388080613a6b565b90926020600181928686013581550194019101613a57565b613aaf610b37565b6139f1565b9081602091031261050d575161083b81610953565b5190610bfc82611d92565b9081602091031261050d575161083b81611d92565b600b80546001600160a01b0319166001600160a01b03928316179055600b54613b1a906001600160a01b031661063f565b90613b6781604051809463647846a560e01b825281600460209788935afa908115613d83575b600091613d66575b501660018060a01b03166001600160601b0360a01b600c541617600c55565b600c54613b7c906001600160a01b031661063f565b82828216613cd6575b5050600b54613b9c906001600160a01b031661063f565b604051633fc8cef360e01b808252919083908581600481865afa908115613cc9575b600091613cac575b5016613bd25750505050565b8391613c2d916040519182528382600481845afa918215613c9f575b600092613c70575b5060405163095ea7b360e01b81526001600160a01b0390911660048201526000196024820152938492839160009183906044820190565b0393165af18015613c63575b613c45575b8080610ace565b81613c5b92903d1061238e5761237f8183610bc0565b503880613c3e565b613c6b61370a565b613c39565b613c91919250843d8611613c98575b613c898183610bc0565b810190613ab4565b9038613bf6565b503d613c7f565b613ca761370a565b613bee565b613cc39150863d8811613c9857613c898183610bc0565b38613bc6565b613cd161370a565b613bbe565b600b54600092613d2691613cf2906001600160a01b031661063f565b60405163095ea7b360e01b81526001600160a01b039091166004820152600019602482015293849283919082906044820190565b03925af18015613d59575b613d3c575b82613b85565b613d5290833d851161238e5761237f8183610bc0565b5038613d36565b613d6161370a565b613d31565b613d7d9150853d8711613c9857613c898183610bc0565b38613b48565b613d8b61370a565b613b40565b15613d9757565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b6000918252600f6020526040909120546001600160a01b03918216911614613df557600090565b600190565b15613e0157565b60405162461bcd60e51b815260206004820152601d60248201527f41646f7074415065743a20496e73756666696369656e742066756e64730000006044820152606490fd5b15613e4d57565b60405162461bcd60e51b815260206004820152602d60248201527f41646f7074415065743a2063616c6c6572206973206e6f7420746865206f776e60448201526c195c881bd9881d1a19481b999d609a1b6064820152608490fd5b9060028201809211613eb657565b610bfc61392b565b9060208201809211613eb657565b91908201809211613eb657565b15613ee057565b60405162461bcd60e51b815260206004820152601d60248201527f41646f7074415065743a2050657420646f6573206e6f742065786973740000006044820152606490fd5b15613f2c57565b60405162461bcd60e51b815260206004820152602160248201527f41646f7074415065743a2050657420697320616c72656164792061646f7074656044820152601960fa1b6064820152608490fd5b6201517f19810191908211613eb657565b6203f47f19810191908211613eb657565b6206977f19810191908211613eb657565b62093a7f19810191908211613eb657565b90610bfc614059600b613fd0611fe1565b948054865260018101546020870152600281015460408701526003810154606087015260048101546080870152600581015460a0870152600681015460c087015261401d60078201610be1565b60e087015261402e60088201610be1565b61010087015261404060098201610be1565b610120870152600a810154610140870152015460ff1690565b1515610160840152565b1561406a57565b60405162461bcd60e51b815260206004820152602560248201527f41646f7074415065743a20416c72656164792061646f7074656420627920736f6044820152646d656f6e6560d81b6064820152608490fd5b93919290926140ca61311a565b60125493600094855260209460158652604081209560408220928051926001600160401b038411614263575b61410a846141048754610a67565b8761398b565b82601f85116001146141de575094600497948461415d956141869c9b9995614154956141669a926141d3575b50508160011b916000199060031b1c19161790555b60018701614270565b60028501614270565b60038301614270565b0180546001600160a01b0319166001600160a01b03909216919091179055565b614191601254614344565b610bfc6141ce6012547f1ce4fd75358b7e2473b65d37352ef8fcc2630c7d157693ec1412f117fd52a3246040518061218c84829190602083019252565b601255565b015190503880614136565b601f93929193198516906141f787600052602060002090565b94905b82821061424b575050946001856141869c9b9995614154956141669a9561415d9960049e9b10614232575b505050811b01905561414b565b015160001960f88460031b161c19169055388080614225565b806001869782949787015181550196019401906141fa565b61426b610b37565b6140f6565b91909182516001600160401b038111614337575b614292816139ff8454610a67565b602080601f83116001146142cd5750819293946000926142c25750508160011b916000199060031b1c1916179055565b015190503880613a1e565b90601f198316956142e385600052602060002090565b926000905b88821061431f5750508360019596971061430657505050811b019055565b015160001960f88460031b161c19169055388080613a6b565b806001859682949686015181550195019301906142e8565b61433f610b37565b614284565b601854600160401b81101561439b575b600181018060185581101561438e575b60186000527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0155565b6143966119d2565b614364565b6143a3610b37565b614354565b601954600160401b8110156143ff575b60018101806019558110156143f2575b60196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950155565b6143fa6119d2565b6143c8565b614407610b37565b6143b8565b1561441357565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b6001600160a01b038116908115614524576000838152600260205260409020546144fc9190614493906001600160a01b031615155b1561440c565b61449c846150d1565b6144a68482615099565b6000848152600260205260409020546144c9906001600160a01b0316151561448d565b6001600160a01b0381166000908152600360205260409020600181540190556135c9846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b9a9794919261459f8c6101609c99969f9e9b98956145916145ad95610180808552840190610aa1565b916020818403910152610aa1565b8c810360408e015290610aa1565b9b60608b015260808a015260a089015260c088015260e08701526101008601526101208501526101408401521515910152565b61083b939260609260018060a01b0316825260208201528160408201520190610805565b90916147dd7f25435a669953bbd4d68b1f0625d13ef5bdd4f7bd9370d48ecfa5eab0fe2d9de8936146376105e984613235565b6147b36147a16147ad6007614656876000526014602052604060002090565b01602061477360096146728a6000526014602052604060002090565b0189600861468a826000526014602052604060002090565b01600a6146a1836000526014602052604060002090565b01546146b7836000526014602052604060002090565b5460016146ce856000526014602052604060002090565b015460026146e6866000526014602052604060002090565b01549060066146ff876000526014602052604060002090565b0154926003614718886000526014602052604060002090565b0154946004614731896000526014602052604060002090565b015496614765600b6128a960056147528d6000526014602052604060002090565b01549b6000526014602052604060002090565b996040519d8e9d8e01614568565b0390614787601f1992838101835282610bc0565b614790886147e2565b6040519384918988602085016145e0565b03908101835282610bc0565b8561498f565b506040805193845260208401949094526001600160a01b0316928201929092529081906060820190565b0390a1565b60006147ed82613235565b6001600160a01b0390838183161584146148a25761480b91506150d1565b6148148361520c565b61481d83613235565b614831846000526004602052604060002090565b80546001600160a01b03199081169091556001600160a01b038216600090815260036020526040902084198154019055614875856000526002602052604060002090565b908154169055167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a4565b6148ab91615145565b61480b565b90604051608081018181106001600160401b03821117614912575b604052606060ff6002839560018060a01b0381541685526040516148f681610c358160018601610aa1565b6020860152015461ffff8116604085015260101c161515910152565b61491a610b37565b6148cb565b909161493661083b93604084526040840190610805565b916020818403910152610805565b9081602091031261050d575190565b9061498460009460809461ffff9398979860018060a01b03168552602085015260a0604085015260a0840190610805565b951660608201520152565b906020906149af6149aa84600052600f602052604060002090565b6148b0565b926149bd6060850151151590565b614a66575b600b546149d7906001600160a01b031661063f565b9060006149f960406149ef885160018060a01b031690565b97015161ffff1690565b95614a1a60405197889687958694633f6b724360e21b865260048601614953565b03925af1908115614a59575b600091614a31575090565b61083b915060203d8111614a52575b614a4a8183610bc0565b810190614944565b503d614a40565b614a6161370a565b614a26565b90614a8e8385015191614a8060405193849287840161491f565b03601f198101835282610bc0565b906149c2565b90614b67614ae2614b4e94610bfc96614ada614af69560018060a01b0397614ac189600b541633146138df565b600052600f6020528780604060002054169116146138df565b810190614b6d565b602080829894969398518301019101614be9565b999798969b9a95614b0c95919495939293611fe1565b9c8d5260208d015260408c015260608b015260808a015260a089015260c088015260e08701526101008601526101208501526101408401521515610160830152565b614b62856000526014602052604060002090565b614c84565b16614458565b9160608383031261050d578235614b8381610953565b9260208101359260408201356001600160401b03811161050d5761083b9201612018565b81601f8201121561050d578051614bbd81611fee565b92614bcb6040519485610bc0565b8184526020828401011161050d5761083b91602080850191016107e2565b6101808183031261050d578051926001600160401b039384811161050d5783614c13918401614ba7565b93602083015181811161050d5784614c2c918501614ba7565b93604084015191821161050d57614c44918401614ba7565b9160608101519160808201519160a08101519160c08201519160e081015191610100820151916101208101519161083b6101606101408401519301613ac9565b600b614d17610160610bfc94805185556020810151600186015560408101516002860155606081015160038601556080810151600486015560a0810151600586015560c08101516006860155614ce160e082015160078701614270565b614cf361010082015160088701614270565b614d0561012082015160098701614270565b610140810151600a8601550151151590565b91019060ff801983541691151516179055565b15614d3157565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608490fd5b60405190614d9b82610ba5565b600582526466616c736560d81b6020830152565b60405190614dbc82610ba5565b60048252637472756560e01b6020830152565b9061395a602092828151948592016107e2565b600092918154614df181610a67565b92600191808316908115614e495750600114614e0d5750505050565b90919293945060005260209081600020906000915b858310614e385750505050019038808080610ace565b805485840152918301918101614e22565b60ff1916845250505081151590910201915038808080610ace565b60405190606082018281106001600160401b03821117614ed4575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b614edc610b37565b614e7f565b600281901b91906001600160fe1b03811603613eb657565b90614f0382611fee565b614f106040519182610bc0565b8281528092614f21601f1991611fee565b0190602036910137565b80511561500b57614f3a614e64565b614f56614f51614f4a8451613ea8565b6003900490565b614ee1565b91614f68614f6384613ebe565b614ef9565b92835280815182019060208501935b828210614fb957505050600390510680600114614fa857600214614f99575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190614f77565b5061083b61336a565b6020906001600160401b03811161502c5760051b0190565b613977610b37565b9091906001600160a01b0380821691826150775750615052836150d1565b831680615065575050610bfc915061520c565b0361506e575050565b610bfc91615099565b838286168403615089575b5050615052565b61509291615145565b3883615082565b6040906150a581613172565b9260009160018060a01b0316825260066020528282208483526020528083832055815260076020522055565b60085481600052600960205280604060002055600160401b811015615138575b600181018060085581101561512b575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6151336119d2565b615101565b615140610b37565b6150f1565b906151aa61518f9261515681613172565b6000198101939084116151ff575b6000948186928352600760205260408320548681036151b7575b506000526007602052604060002090565b556001600160a01b0316600090815260066020526040902090565b9082526020526040812055565b6001600160a01b0385168085526006602081815260408088208b895282528088205460009485529282528084208589528252808820839055918352600790529020553861517e565b61520761392b565b615164565b600880546000199290838101818111615315575b6152bc60009384928184526009602052846040852054911015615308575b8684526152ab7ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee29586810154908310156152fb575b88865280837ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301556000526009602052604060002090565b556000526009602052604060002090565b5582549384156152e757840193808510156152da575b838352015555565b6152e26119d2565b6152d2565b634e487b7160e01b83526031600452602483fd5b6153036119d2565b615273565b6153106119d2565b61523e565b61531d61392b565b615220565b90602091805182101561533457010190565b61533c6119d2565b010190565b80156153dd576000818181805b6153c5575061535c81614ef9565b935b6153685750505090565b60001981019081116153b8575b8091600a916153a2603084840681018091116153ab575b60f81b6001600160f81b031916861a9187615322565b5304908161535e565b6153b361392b565b61538c565b6153c061392b565b615375565b91506153d2600a91613942565b91048084929161534e565b506040516153ea81610ba5565b60018152600360fc1b60208201529056fea2646970667358221220c7f4bf5be1cb9aa92b6c316038e5bbf11d67362a0cc88ecbbab27e3d27900f5664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configureClientExtended(address,uint256[],bytes[],uint16[])": {
        "notice": "OWNER "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1188,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1192,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1195,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1199,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3538,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "MESSAGEv3",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IMessageV3)3461"
      },
      {
        "astId": 3541,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "FEE_TOKEN",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20cl)3265"
      },
      {
        "astId": 3544,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "FEATURE_GATEWAY",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IFeatureGateway)3534"
      },
      {
        "astId": 3551,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "FEATURES",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(ChainData)3560_storage))"
      },
      {
        "astId": 3565,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "CHAINS",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(ChainData)3560_storage)"
      },
      {
        "astId": 3567,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "MESSAGE_OWNER",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 4529,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "nextNftId",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4531,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "nextShelterId",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4535,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "messages",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4540,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "pets",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(PetData)4527_storage)"
      },
      {
        "astId": 4545,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "shelters",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(ShelterData)4502_storage)"
      },
      {
        "astId": 4551,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "shelterManagers",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4555,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "shelterAccountant",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4558,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "allShelters",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4561,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "availablePets",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4564,
        "contract": "contracts/AdoptAPet.sol:AdoptAPet",
        "label": "actionCost",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20cl)3265": {
        "encoding": "inplace",
        "label": "contract IERC20cl",
        "numberOfBytes": "20"
      },
      "t_contract(IFeatureGateway)3534": {
        "encoding": "inplace",
        "label": "contract IFeatureGateway",
        "numberOfBytes": "20"
      },
      "t_contract(IMessageV3)3461": {
        "encoding": "inplace",
        "label": "contract IMessageV3",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint32,t_struct(ChainData)3560_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint32 => struct MessageClient.ChainData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(ChainData)3560_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(ChainData)3560_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MessageClient.ChainData)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainData)3560_storage"
      },
      "t_mapping(t_uint256,t_struct(PetData)4527_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AdoptAPet.PetData)",
        "numberOfBytes": "32",
        "value": "t_struct(PetData)4527_storage"
      },
      "t_mapping(t_uint256,t_struct(ShelterData)4502_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AdoptAPet.ShelterData)",
        "numberOfBytes": "32",
        "value": "t_struct(ShelterData)4502_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(ChainData)3560_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct MessageClient.ChainData)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainData)3560_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChainData)3560_storage": {
        "encoding": "inplace",
        "label": "struct MessageClient.ChainData",
        "members": [
          {
            "astId": 3553,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "endpoint",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3555,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "endpointExtended",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3557,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "confirmations",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 3559,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "extended",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PetData)4527_storage": {
        "encoding": "inplace",
        "label": "struct AdoptAPet.PetData",
        "members": [
          {
            "astId": 4504,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "lastWalk",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4506,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "lastFeed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4508,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "lastTreat",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4510,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "totalWalks",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4512,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "totalFeeds",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4514,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "totalTreats",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4516,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "totalDonations",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4518,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "name",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4520,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "personality",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 4522,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "image",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 4524,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "shelterId",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4526,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "adopted",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(ShelterData)4502_storage": {
        "encoding": "inplace",
        "label": "struct AdoptAPet.ShelterData",
        "members": [
          {
            "astId": 4493,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4495,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "location",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4497,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "website",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4499,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "email",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4501,
            "contract": "contracts/AdoptAPet.sol:AdoptAPet",
            "label": "accountant",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}